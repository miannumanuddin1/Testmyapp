var _currentModule = null;
var _remoteVersion = null;
var _isNative = false;
var _isAndroid = false;
var _currentPage = "#pageHome";
var _previousPage = "";
var _pageCount = 0;
var _buyer = null;
var _pageName = "";
var _url = "";
var _user = null;
var _calendarReturn = "";
var _bg = false;
var _callProblemTool = "";
var _callAssertiveTool = "";
var _discountCode = null;

var _meviiResourceParent = "";
var _supportResourceParent = "";
var _isBuying = false;

var _localStorage = window.localStorage || {};

var app = {
    // Application Constructor
    initialize: function() {
        this.bindEvents();
    },
    // Bind Event Listeners
    //
    // Bind any events that are required on startup. Common events are:
    // 'load', 'deviceready', 'offline', and 'online'.
    bindEvents: function() {
        LogInfo('Starting Mevii!');
        document.addEventListener('deviceready', this.onDeviceReady, false);

        document.addEventListener('load', this.onLoad, false);

        if (navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|IEMobile)/)) {
            _isNative = true;
            LogInfo("Native...");

            document.write("<script src='cordova.js'><\/script>");
            
            if (navigator.userAgent.match(/(Android)/)) {
                _isAndroid = true;
                LogInfo("Android");

                // crosswalk check!
                if (navigator.userAgent.match(/(Crosswalk)/)){
                    LogInfo("Crosswalk installed.");
                    DisablePullToRefresh();
                }
            }
            else{
                LogInfo("iOS");
            }

            // I am actually on a device
            document.addEventListener("deviceready", this.onDeviceReady, false);
            //register the event listener for Android Back Button
            document.addEventListener("backbutton", OnBackKeyDown, false);
        } else {
            // simple browser
            LogInfo("Browser");
            _isNative = false;
            $('#backButton').show();
            $('#backButton').on('click', function(){
                OnBackKeyDown();
            });

            this.onDeviceReady();
        }
    },
    // deviceready Event Handler
    //
    // The scope of 'this' is the event. In order to call the 'receivedEvent'
    // function, we must explicitly call 'app.receivedEvent(...);'
    onDeviceReady: function() {
        LogInfo('Device Ready...starting.');
        app.start();
    },
    // // Ready to go.
    start: function() {
        $(window).resize(function(){
            Resize();
        });

        Resize();

        if (_isNative)
            InitializeImageCache();

        LogInfo("Environment: " + config.Environment);
        $('#environment').html(config.Environment);

        Connect();
    }
};

function CheckForInternet(){
     jQuery.ajaxSetup({async:false});

     // Are they connected to the internet?
     r = Math.round(Math.random() * 10000);
     $.get(config.Path + "/user/getversion",{subins:r},function(version){
        _remoteVersion = version;
        result = true;
     }).error(function(){
        result = false;
     });

     // Is the cache up and ready?
     $.get(config.Fastly + "/user/getversion",function(version){
        LogInfo('Cache is good...Running on FASTLY'); 
        config.Path = config.Fastly;
     }).error(function(){
        LogInfo('Cache Error...Running on AZURE');
     });

     return result;
}

function Connect(){
    $('#topLoader').show();

    var checkConnecion = setInterval(function () {
        var isConnected = CheckForInternet();
        if (!isConnected) {
            LogInfo("User is not connected to the internet. Boo.");

            $('#topLoader').hide();
            ShowError("You are currently not connected to the internet. Please wait for 5 seconds or connect and <a class='connectLink' onclick='Connect()'>try again</a>.", false);
            //return;
        } else {
            HideErrorMsg();
            clearInterval(checkConnecion);

            jQuery.ajaxSetup({ async: true });

            if (_isNative) {
                cordova.getAppVersion().then(function (localVersion) {
                    LogInfo("Version Check - Local: " + localVersion + ' | Remote: ' + _remoteVersion);

                    var compare = VersionCompare(localVersion, _remoteVersion);

                    if (compare < 0) {
                        $('#topLoader').hide();
                        LogInfo("User is on an old version...");
                        ShowError("There is a new version of Mevii! You are currently running version " + localVersion + ". Please visit your app store and download the latest version [v" + _remoteVersion + "] to continue.", false);
                        return;
                    }
                    else {
                        Start();
                    }
                });
            }
            else {
                Start();
            }
        }

        
    }, 5000);
}

function DisablePullToRefresh(){
    var lastTouchY = 0,
        maybePreventPullToRefresh = false;
    // Pull-to-refresh will only trigger if the scroll begins when the document's Y offset is zero.
    var touchstartHandler = function (e) {
        if (e.touches.length != 1) {
            return;
        }   
        lastTouchY = e.touches[0].clientY;
        maybePreventPullToRefresh = (window.pageYOffset == 0); 
    }   
    // To suppress pull-to-refresh it is sufficient to preventDefault the first overscrolling touchmove.
    var touchmoveHandler = function (e) {
        var touchY = e.touches[0].clientY,
            touchYDelta = touchY - lastTouchY;
        lastTouchY = touchY;
        if (maybePreventPullToRefresh) {
            maybePreventPullToRefresh = false;
            if (touchYDelta > 0) {
                e.preventDefault();
                return;
            }   
        }   
        if (window.pageYOffset == 0 && touchYDelta > 0) {
            e.preventDefault();
            return;
        }   
    }   
    document.addEventListener('touchstart', touchstartHandler, false);
    document.addEventListener('touchmove', touchmoveHandler, false);
}

function HideHeader(){
    $('#meviiHeader').transition({ y: '-100px'}, 400);
}

function HideLoadingScreen(){
    $('#loadingScreen').fadeOut();
    $('#mainScreen').css('opacity', '1');
    $('#topLoader').hide();
}

function InitializeApplication(){
    InitializeSignup();
    $('.watson').hide();

    var session = window.localStorage.getItem('meviiSession');
    if (session === null) {
        $('#pageHome').addClass('activePage');
        $('body').addClass('loginBG');

        $('#loadingScreen').fadeOut();
        $('#mainScreen').css('opacity', '1');
        $('#topLoader').hide();
    }
    else {
        $.ajax({
            url: config.Path + '/user/keylogin',
            type: 'POST',
            data: { APIKey: session }
        }).done(function(data){
            if (data === null){
                $('#pageHome').addClass('activePage');
                HideLoadingScreen();
            }
            else {
                ProcessLogin(data);
            }
        });
    }
}

function InitializeImageCache(){ 
    //// code add by numan for image cache
    ImgCache.options.debug = false;
    // increase allocated space on Chrome to 50MB, default was 10MB
    ImgCache.options.chromeQuota = 50 * 1024 * 1024;
    
    ImgCache.overridables.log = function (str, level) {
        'use strict';
        if (ImgCache.options.debug) {
            if (level === LOG_LEVEL_INFO) { str = 'INFO: ' + str; }
            if (level === LOG_LEVEL_WARNING) { str = 'WARN: ' + str; }
            if (level === LOG_LEVEL_ERROR) { str = 'ERROR: ' + str; }
            
            LogInfo('CACHE ' + str);
        }
    }

    ImgCache.init(function () {
        if (ImgCache.ready)
            LogInfo('ImgCache init: success!');
        else
            LogInfo('ImgCache not ready...');

    }, function () {
        HandleError('ImgCache init: error! Check the log for errors');
    });
}

function GoToPasswordReset(){
    ShowNoLoginHeader();
    $('#pagePasswordReset #getCode').hide();
    $('#pagePasswordReset #getPassword').hide();
    MovePageLeft('#pagePasswordReset', '#pageHome');
    setTimeout(function(){ $('#resetEmailTxt').focus(); }, 500);
}

function LoadBuyer(callback){
    if (_user.PaymentCode === null || _user.PaymentCode === '') {
        config.Watson = false;

        _buyer = null;

        if (callback)
            callback();

        return;
    }

    $.ajax({
        url: config.Path + '/user/getbuyer'
    }).done(function(data){
        if (data === null){
            _buyer = null;
            config.Watson = false;
        }
        else {
             _buyer = data;
            config.Watson = _buyer.AllowWatson;
        }

        if (callback)
            callback();
    });
}

function LoadContinueProgress(pageID, callback) {
    $.ajax({
        url: config.Path + '/marvin/getmodulebypage',
        data: { pageID: pageID }
    }).done(function(data){
        if (data === null) {
            HandleError("GetModuleByPage returned null");
            _currentModule = null;
            _pageCount = 0;
            return;
        }

        if (data.Name === null){
            ShowError("Ummm...nothing has been published!");
            return;
        }

        _currentModule = data;

        if (data.Pages !== null)
            _pageCount = data.Pages.length;
        else
            _pageCount = 0;

        if (typeof callback != "undefined" && callback !== null)
            callback();
    });
}

function LoadInitialModule(callback){
    $.ajax({
        url: config.Path + '/marvin/getmodulebypage',
        data: { pageID: null }
    }).done(function(data){
        if (data === null) {
            HandleError("GetModuleByPage returned null");
            _currentModule = null;
            _pageCount = 0;
            return;
        }

        _currentModule = data;

        if (data.Pages !== null)
            _pageCount = data.Pages.length;
        else
            _pageCount = 0;

        if (typeof callback != "undefined" && callback !== null)
            callback(data);
    });
}

function LoadMessages(callback){
    $('#meviiMessage').html('Loading...');
    // get the Mevii Message
    $.ajax({
        url: config.Path + '/message/get'
    }).done(function(msg){
        if (msg === null) {
            HandleError("Message/Get returned null...");
            return;
        }

        if (msg.Text === null || msg.Text === "")
            $('#meviiMessage').html('Hi there. We are currently out of messages!');
        else
            $('#meviiMessage').html(msg.Text);

        if (typeof callback != "undefined" && callback !== null)
            callback();
    });
}

function Login(){
    var email = $('#txtEmail').val();
    var password = $('#txtPassword').val();

    if (config.Debug && email === '' && password === ''){
        email = 'test@test.com';
        password = 'test';
    }

    // apparently people are putting spaces in their email addresses
    email = email.split(' ').join('');

    $('#topLoader').show();
    $('#loginBtn').prop('disabled', true);

    $.ajax({
        type: "POST",
        url: config.Path + '/user/login',
        data: { email: email, password: password }
    }).done(function (data) {
        
        if(data === null) {
            $('#topLoader').hide();
            $('#loginBtn').prop('disabled', false);

            ShowError("Invalid login. Please try again.");
        } else {
            window.localStorage.setItem('meviiSession', data.APIKey);
            ProcessLogin(data);
        }
    });
}
//the function below controls the behavior of the Android "Back Button"
function OnBackKeyDown(){

    var theCurrentPage = _currentPage;
    // Home page
    if (theCurrentPage == '#pageContinue'){
        // do nothing...
        return;
    }
    // Marvin
    if(theCurrentPage == '#2Page' || theCurrentPage == '#3Page'){
        CloseVideo(); // in common

        // if there is no previous button on the Marvin page, then we
        // send them to the home page.
        if ($(theCurrentPage + ' .btnPrev').hasClass('hidden')) {
            ShowHomePage();
        }
        else {
            ShowPreviousPage();
        }

        return;
    }

    if ($("#leftMenu").hasClass('activeMenu')){
        if ($('.activeSetting').length > 0){
            HideSettingsStaticPage("#pageProfile");
            HideSettingsStaticPage('#pageResources');
            HideSettingsStaticPage('#pageTerms');
            HideSettingsStaticPage('#pageHelp');
            HideSettingsStaticPage('#pageSocialProfile');
            HideSettingsStaticPage('#pagePreferences');

            return;
        }

        HideSettingsMenu();
        return;
    }

    if($("#rightMenu").hasClass('activeMenu')){
        HideDashboardMenu('#rightMenu', _currentPage);
        HideToolsMenu();
        return;
    }

    // Journal
    if (theCurrentPage == '#pageJournalView') {
        ShowDashboardMenu();
        return;
    }

    if (!_isEmbeddedJournal && (theCurrentPage == '#pageJournalCreate' || theCurrentPage == '#pageJournalSearch')) {
        MovePageRight('#pageJournalView', theCurrentPage);
        return;
    }

    // Goal Setting Tool
    if (theCurrentPage == '#pageGoals') {
        ShowDashboardMenu();
        return;
    }

    if (theCurrentPage == '#pageGoalSettingCompleted'){
        MovePageRight('#pageGoals', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageGoalSettingHome'){
        MovePageRight('#pageGoals', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageGoalSettingPlan'){
        MovePageRight('#pageGoalSettingHome', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pagePlans'){
        MovePageRight('#pageGoalSettingPlan', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageActivityAdd'){
        MovePageRight('#pageGoalSettingHome', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageStressReliefAudio' || theCurrentPage == '#pageStressReliefVideos'){
        MovePageRight('#pageStressRelief', theCurrentPage);
        return;
    }

    // Motivation Tool
    if (theCurrentPage == '#pageMotivationTool'){
        ShowDashboardMenu();
        return;
    }

    if (theCurrentPage == '#pageMotivationGoal'){
        MovePageRight('#pageMotivationTool', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageMotivationStrengths'){
        MovePageRight('#pageMotivationGoal', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageMatchingSecond'){
        MovePageRight('#pageMatchingHome', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageMatchingPopUp'){
        MovePageDown('#pageMatchingSecond', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageAssertiveForm'){
        MovePageRight('#pageAssertive', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageAssertivePopUp'){
        MovePageDown('#pageAssertive', theCurrentPage);
        return;
    }

    if (theCurrentPage == '#pageResourceSupport' || theCurrentPage == '#pageMeviiResource'){
        MovePageRight('#pageResourcesTool', theCurrentPage);
        return;
    }

    if (_previousPage === null || _previousPage === '')
        ShowHomePage();
    else
        MovePageRight(_previousPage, _currentPage);
}

function ProcessBackgroundCalls(){
    // these are all the calls that we need to load, but can aren't as important as getting the user up and running
    if (_bg)
        return;

    _bg = true;

    LoadMenuInfo();

    InitializeCalendarEvent();
    InitializeGoalSetting();
    InitializeJournal();
    InitializeMotivation();
    InitializeMatching();
    InitializePleasant();
    InitializeHealthCare();
    InitializeResources();
    InitializeReports();
    InitializeStressRelief();
    InitializeLibrary();
    InitializeAssertive();
    InitializeInnerCircle();
    InitializePreferences();
    InitializeFeelings();
    InitializeProblemSolving();
    InitializeSocialProfile();
    InitializeContentEngineForUser();
}

function ProcessLogin(data){
    if (data.Zip === '' || data.Zip === null) {
        $('#topLoader').hide();
        $('body').removeClass('loginBG');
        _user = data;

        HideLoadingScreen();
        MovePageLeft('#pageSignupDemographics', _currentPage);
        return;
    }
  
    if (data.IsActive === false) {
            $('#topLoader').hide();
            $('#loginBtn').prop('disabled', false);
            ShowError("You account is not currently active. Please follow the instructions sent to your email address. If you continue to have trouble, please contact us at <a style='color: #fff' href='mailto:support@mevii.com'>support@mevii.com</a>.", false);
            return;
    }
    
    if (data.FirstName == 'EXPIRED') {
        $('#topLoader').hide();
        $('#loginBtn').prop('disabled', false);
        ShowError("We are sorry, your account has expired. Please <a href='https://www.mevii.com/renew' class='errorLink'>click here</a> to renew your subscription.", false);
        return;
    }

    if (data.FirstName == 'NOTACTIVE') {
        $('#topLoader').hide();
        $('#loginBtn').prop('disabled', false);
        ShowError("You account is not currently active. Please follow the instructions sent to your email address. If you continue to have trouble, please contact us at <a style='color: #fff' href='mailto:support@mevii.com'>support@mevii.com</a>.", false);
        return;
    }

    $('#hdnUser').val(data.ID);

    $('#errorBox').hide();
    $('body').removeClass('loginBG');
    ShowFirstPage(data);
}

function ShowFirstPage(data, isQuick){
    // setup the api key for all future calls
    $.ajaxSetup({
        headers: { 'apiKey': data.APIKey }
    });

    // save the user information...we are certainly gonna need it
    _user = data;

    // we want to get this loaded early so we know whether or not to initialize Watson
    LoadBuyer(function(){
        if (config.Watson) {
            InitializeWatson();
            $('.watson').show();
        }
    });

    $('.userName').html(_user.FirstName);

    if (_user.IsNewUser){
        // new users immediately start with Marvin and the first module.
        LoadInitialModule(function(module){
            var name = module.Name;
            var level = name.substr(0, name.indexOf(':'));

            var progress = $('.marvinBottom .progressBlock');
            var p = parseInt(_pageOrder / _pageCount * 100);

            $('#continueModule').html(level);
            $('#continueProgress').html(p + '%');

            $('#topLoader').hide();
            $('#loginBtn').prop('disabled', false);

            if (config.Debug === true){
                //REMOVE THIS AND PUT BACK CONTINUE
                // _editModeFeelings = false;
                // $('.eventsHomeMenuBtn').addClass('active');
                // $('.eventsSearchMenuBtn').removeClass('active');
                // $('.eventsNewMenuBtn').removeClass('active');
                // MovePageLeft('#pageFeelingsEventsHome', _currentPage);
                // MovePageLeft('#pageProblemSolvingList', _currentPage);
                // GetEvents();

                Continue(null, false); // in contentengine.js
                ShowHeader();
            }
            else {
                Continue(null, false); // in contentengine.js
                ShowHeader();
            }

            HideLoadingScreen();

            ProcessBackgroundCalls();
        });
    }
    else {
        if (isQuick){
            _currentPage = '#pageContinue';
            $(_currentPage).addClass('activePage');
            $('.topHeader').transition({ y: '100px'}, 0);
        }
        else {
            ShowHeader();
            MovePageLeft('#pageContinue', _currentPage);
        }

        LoadMessages();

        HideLoadingScreen();

        LoadContinueProgress(_user.CurrentPageID, function(){
            var name = _currentModule.Name;
            var level = name.substr(0, name.indexOf(':'));

            var progress = $('.marvinBottom .progressBlock');
            var p = parseInt(_pageOrder / _pageCount * 100);

            $('#continueModule').html(level);
            $('#topLoader').hide();
            $('#loginBtn').prop('disabled', false);

            ProcessBackgroundCalls();
        });
    }
}

function Start() {
    InitializeMenu();
    InitializeContentEngine();
    InitializePushNotifications(); // in mevii-push

    $('.trackit').on('click', function(){
        var id = $(this).attr('id');
        LogInfo('Button Clicked: ' + id);
    });

    $('#loginBtn').on('click', function(){
        Login();
    });

    $('#resetPasswordBtn').on('click', function(){
        GoToPasswordReset();
    });

    $('#submitResetPasswordBtn').on('click', function(){
        SubmitResetPasswordRequest();
    });

    $('.cancelResetPasswordBtn').on('click', function(){
        $('body').addClass('loginBG');
        HideHeader();
        MovePageRight('#pageHome', '#pagePasswordReset');
		$('#txtForgotPassword').val('');
		$('#txtForgotConfirm').val('');
		$('#txtForgotCode').val('');
		$('#resetEmailTxt').val('');
		$('#getCode').hide();
		$('#getPassword').hide();
		$('#pagePasswordReset .before').show();
		
    });
	
	$('#btnForgotCode').on('click', function(){
        ValidateForgotPasswordCode();
    });
	
	$('#btnForgotCodeBack').on('click', function(){
		$('#txtForgotCode').val('');
		$('#pagePasswordReset .before').fadeIn();
		$('#pagePasswordReset #getCode').hide();
	});
	
	$('#btnForgotCancel').on('click', function(){
		
	});
	
	$('#HaveACode').on('click', function(){
		$('#pagePasswordReset .before').hide();
		$('#pagePasswordReset #getCode').fadeIn();
	});

    $('#btnResetPasswordComplete').on('click', function(){
		var password = $('#txtForgotPassword').val();
		var confirm = $('#txtForgotConfirm').val();
		
		if (password === ''){
			ShowError('Please enter your new password');
			$('#txtForgotPassword').focus();
			return;
		}
		
		if (password != confirm){
			ShowError('Your passwords do not match');
			$('#txtForgotPassword').focus();
			return;
		}
		
		$.ajax({
			url: config.Path + '/user/updatepassword',
			type: 'POST',
			data: { ID: _user.ID, Password: password }
		}).done(function(data){
			HideHeader();
			
			$('body').addClass('loginBG');
			ShowSuccess('Password successfully changed. Please login with your new password.');
			MovePageRight('#pageHome', _currentPage);
			_user = null;
			
			$('#pagePasswordReset .before').show();
			$('#pagePasswordReset #getCode').hide();
			$('#pagePasswordReset #getPassword').hide();	
		});
    });

    InitializeApplication();

    $('.marvinPage select, .marvinPage input, .marvinPage textarea').on('focus', function(){
        $('#meviiHeader').css('position', 'static');
    });

    $('.marvinPage select, .marvinPage input, .marvinPage textarea').on('blur', function(){
        $('#meviiHeader').css('position', 'fixed');
    });

    // make clicks faster!
    FastClick.attach(document.body);

    $(document).on('blur', 'input, textarea', function () {
        setTimeout(function () {
            window.scrollTo(document.body.scrollLeft, document.body.scrollTop);
        }, 0);
    });
}

function SubmitResetPasswordRequest(){
    var email = $('#resetEmailTxt').val();

    if (!isValidEmailAddress(email)){
        ShowError('Please enter a valid email.')
    }
    else{
        ShowLoader();
        $.ajax({
            url: config.Path + '/user/isduplicateemail?email=' + encodeURIComponent(email)
        }).done(function(data){
            HideLoader();

            if(data === null){
                HandleError('/user/isduplicateemail returned null');
                return;
            }

            if (data === false) { // couldn't find the user
                ShowError('Sorry, we couldn\'t find a user with that email address.');
                return;
            }

            ShowLoader();
            $.ajax({
                url: config.Path + '/connector/startresetpassword',
                type: 'POST',
                data: { Email: email }
            }).done(function(data){
                HideLoader();

                if (data === null) {
                    HandleError('/connector/startresetpassword returned null');
                    return;
                }

                if (data === false) { // couldn't find the user (this should never happen, but the API can return false)
                    ShowError('Sorry, we couldn\'t find a user with that email address.');
                    return;
                }

                $('#pagePasswordReset .before').hide();
                $('#pagePasswordReset #getCode').fadeIn();
            });
    });
    }
}

function ShowNoLoginHeader(){
    $('body').removeClass('loginBG');
    $('.topHeader .preferences').hide();
    $('.topHeader .dashboard').hide();
    $('.topHeader').transition({ y: '100px'}, 400);

}

function ShowHeader(callback){
    $('.topHeader .preferences').show();
    $('.topHeader .dashboard').show();
    $('.topHeader').transition({ y: '100px'}, 400);

    if (callback)
        setTimeout(function(){ callback(); }, 400);
}

function Resize(){
    var mh = $(window).height();
    mh -= 78; // header
    mh -= 75; // footer

    $('.marvinPage .content, .toolPage .content').css('min-height', mh + 'px');
   
    var lh = $(window).height();
    lh -= 58;

    $('#leftMenu .leftContent, #leftMenu #settingsOverlay-close, .rightMenuContent').css('height', lh + 'px');

    var oh = $(window).height();
    $('#settingsOverlay-close').css('min-height', oh + 'px');
}

function ValidateForgotPasswordCode(){
	var code = $('#txtForgotCode').val();
	if (code == ''){
		ShowError('Please enter the 6-digit code you received in your email.');
		$('#txtForgotCode').focus();
		return;
	}
	
	$.ajax({
		url: config.Path + '/user/validateresetpassword?key=' + code
	}).done(function(data){
		if (data === null){
			ShowError('We are sorry, the code you have entered is invalid or expired. If you need help, please don\'t hesitate to contact us at support@mevii.com');
			return;
		}
		
		$('#getCode').hide();
		$('#getPassword').fadeIn();
		_user = data;
	});
}

function VersionCompare(v1, v2, options) {
    var lexicographical = options && options.lexicographical,
        zeroExtend = options && options.zeroExtend,
        v1parts = v1.split('.'),
        v2parts = v2.split('.');

    function isValidPart(x) {
        return (lexicographical ? /^\d+[A-Za-z]*$/ : /^\d+$/).test(x);
    }

    if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {
        return NaN;
    }

    if (zeroExtend) {
        while (v1parts.length < v2parts.length) v1parts.push("0");
        while (v2parts.length < v1parts.length) v2parts.push("0");
    }

    if (!lexicographical) {
        v1parts = v1parts.map(Number);
        v2parts = v2parts.map(Number);
    }

    for (var i = 0; i < v1parts.length; ++i) {
        if (v2parts.length == i) {
            return 1;
        }

        if (v1parts[i] == v2parts[i]) {
            continue;
        }
        else if (v1parts[i] > v2parts[i]) {
            return 1;
        }
        else {
            return -1;
        }
    }

    if (v1parts.length != v2parts.length) {
        return -1;
    }

    return 0;
}

InitializeIAP = function(callback) {
    if (!window.store) {
        HandleError('window.store not available...IAP failed');
        return;
    }

    // Enable maximum logging level
    store.verbosity = store.DEBUG;

    // Enable remote receipt validation
    // store.validator = "https://api.fovea.cc:1982/check-purchase";

    store.register({
        id:    config.IAP,
        //alias: 'Mevii Subscription',
        type:  store.PAID_SUBSCRIPTION
    });

    // When any product gets updated, refresh the HTML.
    // store.when("product").updated(function (p) {
    //  LogInfo('IAP Product Updated');
    //     RenderIAP(p);
    // });

    store.when(config.IAP).approved(function(p) {
        p.finish();

        if (_isBuying || p.transaction === null)
            return;

        if (_isAndroid){
            if (p.transaction.purchaseToken === null)
                return;
        }
        else { // iOS
            if (p.transaction.id === null)
                return;
        }

        _isBuying = true;
        LogInfo("IAP Approved....");
        // p.verify();

        var transactionID = null;
        var receipt = null;

        if (_isAndroid){
            transactionID = p.transaction.purchaseToken;
            receipt = JSON.stringify(p.transaction.receipt);
        }
        else{
            transactionID = p.transaction.id;
            receipt = JSON.stringify(p.transaction);
        }
        
        PaymentSignup(transactionID, receipt, function(){
            MovePageLeft("#pageSignupWelcomePay", _currentPage);
        });
    });

    store.when(config.IAP).cancelled(function(p) {
        LogInfo("IAP Cancelled");
        $('#topLoader').hide();
        _isBuying = false;
    });

    // store.when(config.IAP).verified(function(p) {
    //     LogInfo('IAP Subscription Successfully Verified');
    //     p.finish();
    // });

    // store.when(config.IAP).unverified(function(p) {
    //     LogInfo('IAP Subscription FAILED Verification');
    // });

    store.when(config.IAP).updated(function(p) {
        if (_isAndroid){
            LogInfo('IAP Subscription Updated \n' + JSON.stringify(p));         
        }

        // LogInfo('IAP Subscription Updated \n' + JSON.stringify(p));
        
        // if (p.owned) {
     //        LogInfo('Product Owned');
     //    }
     //    else {
     //        LogInfo('Product NOT Owned');
     //        if (_user !== null) {
     //         // they don't own this...need to make them inactive.
     //         // LogInfo('Deactivating User...');
     //         // $.ajax({
     //         //  url: config.Path + '/user/deactivate',
     //         //  type: 'POST',
     //         //  data: _user
     //         // }).done(function(data){
     //         //  if (data === null){
     //         //      HandleError('user/deactivate returned null');
     //         //  }

     //         //  MovePageRight('#pageHome', _currentPage);
     //         // });
     //        }
     //    }
    });

    // Log all errors
    store.error(function(error) {
        if (error.message == 'Cannot connect to iTunes Store'){
            // they just cancelled out of the iTunes connection...
            ShowError('Please connect to your app store account to subscribe.');
            return;
        }

        HandleError('ERROR [' + error.code + '] : ' + error.message);
    });

    store.ready(function() {
        LogInfo('IAP Store is Ready');

        if (callback) {
            LogInfo('Ready callback')
            callback();
        }
    });

    store.refresh();
};

InitializeDiscountIAP = function(iapID, callback) {
    if (!window.store) {
        HandleError('window.store not available...IAP [' + iapID + '] failed');
        return;
    }

    LogInfo('InitializeDiscountIAP [' + iapID + ']');

    // Enable maximum logging level
    store.verbosity = store.DEBUG;

    // Enable remote receipt validation
    // store.validator = "https://api.fovea.cc:1982/check-purchase";

    store.register({
        id:    iapID,
        type:  store.PAID_SUBSCRIPTION
    });

    store.when(iapID).approved(function(p) {
        if (_discountCode === null){
            // shouldn't be here...IAP is weird.
            return;
        }

        LogInfo("IAP [" + iapID + "] Approving....");
        p.finish();

        if (_isBuying || p.transaction === null)
            return;

        if (_isAndroid){
            if (p.transaction.purchaseToken === null)
                return;
        }
        else { // iOS
            if (p.transaction.id === null)
                return;
        }

        _isBuying = true;
        LogInfo("IAP [" + iapID + "] Good to go...Approved....");
        // p.verify();

        var transactionID = null;
        var receipt = null;

        if (_isAndroid){
            transactionID = p.transaction.purchaseToken;
            receipt = JSON.stringify(p.transaction.receipt);
        }
        else{
            transactionID = p.transaction.id;
            receipt = JSON.stringify(p.transaction);
        }
        
        DiscountSignup(_discountCode, transactionID, receipt, function(){
            MovePageLeft("#pageSignupWelcome", _currentPage);
        });
    });

    store.when(iapID).cancelled(function(p) {
        LogInfo("IAP [" + iapID + "] Cancelled");
        $('#topLoader').hide();
        _isBuying = false;
    });

    store.when(iapID).updated(function(p) {
        if (_isAndroid){
            LogInfo('IAP [' + iapID + '] Subscription Updated \n' + JSON.stringify(p));         
        }
    });

    // Log all errors
    store.error(function(error) {
        if (error.message == 'Cannot connect to iTunes Store'){
            // they just cancelled out of the iTunes connection...
            ShowError('Please connect to your app store account to subscribe.');
            return;
        }

        HandleError('ERROR [' + error.code + '] : ' + error.message);
    });

    store.ready(function() {
        LogInfo('IAP [' + iapID + '] Store is Ready');

        if (callback) {
            LogInfo('Discount - Ready callback')
            callback();
        }
    });

    store.refresh();
};

function HideErrorMsg() {
    var eb = $('#errorBox');
    eb.hide();
}

RenderIAP = function(iapID, elementID) {
    var p = store.get(iapID);

    LogInfo('IAP Rendering Product\n' + JSON.stringify(p));

    var el = $(elementID);
    
    if (!p.loaded) {
       el.html('<h3>' + p.alias + ' Not Loaded</h3>');
    }
    else if (!p.valid) {
        el.html('<h3>' + p.alias + ' Invalid</h3>');
    }
    else if (p.valid) {
        var html = '<div class="IAPProduct">';
        // html += "<div class='iapTitle'>" + p.title + "</div>";
        // html += "<div class='iapDescription'>" + p.description + "</div>";

        if (p.canPurchase) {
            html += "<button type='button' productId='" + p.id + "' class='btnIAP' id='" + p.id + "'>Subscribe</button>";
        }
        else {
            html += '<p style="margin-top: 15px; font-weight: 400;">You are currently subscribed.</p>';
            html += '<p style="font-size: 80%; color: #aaa;">(If you have recently cancelled your subscription it may take a few hours to process through the app store).</p>';
        }

        html += "</div>";

        el.html(html);

        $('.btnIAP').on('click', function (event) {
            $('#topLoader').show();
            var pid = this.getAttribute("productId");
            LogInfo('Buy Clicked: ' + pid);
            store.order(pid);
        });
    }
};






