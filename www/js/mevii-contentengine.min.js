// This is the file that formats Marvin.

var _assessmentShortFeedback = [], _pick3Feedback = [], _practiceSessionFeedback = [], _eomFeedback = [];
var _pageFeedback = [];
var _userAnswers = [];
var _prevMarvin, _currentMarvin, _nextMarvin, _afterMarvin, _beforeMarvin;
var _visiblePage = "2";
var _pageOrder = 0;
var _prevPage = "3";
var _branchControlID = null;
var _branchOptions = [];
var _isEmbeddedGST = false, _isEmbeddedMotivation = false, _isEmbeddedChangeTool = false;
var _isEmbeddedMatching = false, _isEmbeddedPrevisit = false, _isEmbeddedResources = false;
var _isEmbeddedPA = false, _isEmbeddedIC = false, _isEmbeddedJournal = false;
var _GSTPageControls = null;
var _pick3Text = null, _pick3Stems = null;
var _usedTools = false;
var _practiceSessionScore = 0;
var _motivationTool = null;
var _isMoving = false, _changedModules = false;
var _logicTools = [];

//by waseem
var _previousMarvinArray = [];

function InitializeContentEngine(){
    'use strict';

    $('.btnNext').on('click', function(){
        ClickNextButton();
    });

    $('.btnWatsonEnd').on('click', function(){
        _isWatsonArticle = false;

        if (_returnToFavorites) { // in mevii-watson.js
            MovePageRight('#pageFavs', _currentPage);
            _returnToFavorites = false;
        }
        else
            MovePageRight('#pageVATS', _currentPage);
    });

    $('.btnPrev').on('click', function(){
        ClickPrevButton();
    });

    $('#btnContinue').on('click', function(){
        ShowLoader();
        //by waseem for previous marvin
        _previousMarvinArray = [];
        Continue(_user.CurrentPageID, true);
    });

    $('#btnStress').on('click', function(){
        $.ajax({
            url: config.Path + '/user/updatestatistics',
            data: { UserID: _user.ID, StressReliefHomeClicks: 1 },
            type: 'POST'
        }).done(function(data){
            if (data === null)
                HandleError('/user/updatestatistics returned null');
        });

        MovePageLeft('#pageStressRelief', _currentPage);
    });

    $('.btnCloseTipSheet').on('click', function(){
        if (_tipSheetType == 'generic')
            MovePageRight('#pageTipSheet', _currentPage);
        else if (_tipSheetType == 'watson') {
            MovePageRight('#pageVATS', _currentPage);
        }
        else if (_tipSheetType == 'favorite'){
            MovePageRight('#pageFavs', _currentPage);
        }
        else
            MovePageRight('#pageStressTipSheet', _currentPage);

        _tipSheet = null;
    });

    $('.btnCloseInsert').on('click', function(){
        MovePageDown(_currentPage, '#insertPage', true, function(){
            $('#insertPage').hide();
        });
    });
}

function InitializeContentEngineForUser(){
    LoadPick3Text();
}

function BuildAndSaveLongMotivationReport(){
    if (_motivationTool === null)
        return;

    var html = '';
    html += '<h2 class="longReportTitle">What I find most meaningful:</h2>';
    html += '<p>Hearing from you, the things that are most important to keep in mind as you begin your Mevii journey are ';
    html += '<span class="meaningful">' + _motivationTool.Meaningful1;

    if (_motivationTool.Meaningful2 !== null)
        html += ', ' + _motivationTool.Meaningful2;

    if (_motivationTool.Meaningful3 !== null)
        html += ', ' + _motivationTool.Meaningful3;

    html += '</p>';

    html += '<h2 class="longReportTitle">My Motivation for using Mevii:</h2>';
    html += '<p>Particularly the thing that most motivates you to try to get better at ';
    html += 'managing everyday life is ' + _motivationTool.Reason + '.';
    html += 'When things may feel hard, think back to this reason for why you keep going. ';
    html += 'When things go well, think about how all your effort is going to make ' + _motivationTool.Reason + ' even better.</p>';

    html += '<h2 class="longReportTitle">My Strengths: </h2>';
    html += '<p>You have taken some important steps already, coming to Mevii to learn ';
    html += 'and get support in your personal journey. As you keep going, be sure to remember ';
    html += 'the things you are already good at: ' + _motivationTool.Strengths.replace(',', ', ') + '.';
    html += 'Try to draw on these things as you continue to get even better at creating the every day life you want.</p>';

    SaveReport(html, 'motivation long');
}

function BuildLongDiscoveryReport(){
    $.ajax({
        url: config.Path + '/report/buildlongdiscoveryreport',
        data: { userID: _user.ID }
    });
}

function BuildEndOfModuleReport(page, callback){
    $.ajax({
        url: config.Path + '/report/buildendofmodulereport',
        data: { userID: _user.ID, moduleID: page.ModuleID }
    }).done(function(report){
        if (report === null){
            HandleError("/report/buildendofmodulereport returned null");
            return;
        }

        GetReports(); // in mevii-reports.js

        if (typeof callback != "undefined" && callback !== null)
            callback(report);
    });
}

function BuildFeedbackHtml(asf) {
    var html = '';

    for (var j = 0; j < asf.Short.length; j++) {
        var color = asf.Color[j];
        var img = asf.Image[j];

        if (typeof img != "undefined" && img !== null && img !== '') {
            html += '<img class="feedbackImage" src="' + img + '" />';
        }
        else {
            if (color !== "" && color !== null)
                html += '<div style="background: ' + color + '" class="shortFeedback coloredFeedback">';
            else
                html += '<div class="shortFeedback">';

            html += Encoder.htmlDecode(asf.Short[j]) + '</div>';
        }

    }

    return html;
}

function BuildPageHtml(divID, html, prevPage, currentPage, nextPage, controls){
    $(divID).append(html);

    if (typeof controls != "undefined" && controls !== null)
        InitializeVideo(controls);

    InitializeDropDowns();
    InitializeLightbox();
    InitializeInsert();
}

function CheckControlBuyer(control){
    if (typeof control.BuyerID != 'undefined' && control.BuyerID !== null){
        // this control belongs to certain buyers...should the user see it?
        if (_buyer === null) {
            // user has no buyer...
            return false;
        }

        if (_buyer.ID != control.BuyerID){
            // user is a different buyer...
            return false;
        }
    }

    return true;
}

function ClearFeedbackShortcodes(feedback){
    // we are hunting for something like this: [#]
    var reg = /\[\d\]/;
    var clean = feedback.replace(reg, '');
    clean = clean.split('<br>').join('');
    clean = clean.split('<br/>').join('');
    return clean;
}

function ClickNextButton(){
    if (_isMoving)
        return;

    var valid = true;
    ShowLoader();

    if (_currentMarvin.IsQuestEnd){
        $.ajax({
            url: config.Path + '/marvin/saveuserquest',
            data: { PageID: _currentMarvin.ID, UserID: _user.ID },
            type: 'POST'
        });
    }

    if (_currentMarvin.IsSavable){
        switch(_currentMarvin.PageType.Name){
            case "Pick 3":
                valid = SavePick3Answers();
                break;
            default:
                valid = SaveArticleAnswers();
                break;
        }
    }

    if (valid)
        ShowNextPage();
}

function ClickPrevButton(){
    if (_isMoving)
        return;

    ShowPreviousPage();
}

function CompleteModule(moduleID) {
    $.ajax({
        url: config.Path + "/marvin/completemodule",
        data: { ModuleID: moduleID, UserID: _user.ID },
        type: 'POST'
    }).done(function(data){
        if (data === null) {
            HandleError("/marvin/completemodule returned null");
            return;
        }
    });
}

function Continue(pageID, stayCurrent){
    ShowLoader();

    $('#2Content, #3Content').html('');

    if (_visiblePage == "2")
        _visiblePage = "3";
    else
        _visiblePage = "2";

    var divID = '#' + _visiblePage + 'Content';

    $.ajax({
        url: config.Path + '/marvin/continue',
        data: { pageID: pageID, userID: _user.ID, stayCurrent: stayCurrent },
        type: 'GET'
    }).done(function(data) {
        if (data === null) {
            HandleError();
            return;
        }

        // we don't save your place for watson articles...
        if (!_isWatsonArticle)
            SaveUserPlace();

        _beforeMarvin = data[0];
        _prevMarvin = data[1];
        _currentMarvin = data[2];
        _nextMarvin = data[3];
        _afterMarvin = data[4];

        _isMoving = true;
        $('.marvinBottom').css('opacity', '.5');

        // so...if they "continue" into a feedback page...we need to jump to the next page
        // because it will not render correctly)
        if (_currentMarvin.PageType.Name == "Feedback"){
            _prevMarvin = _currentMarvin;
            _currentMarvin = _nextMarvin;
            _nextMarvin = _afterMarvin;
            _afterMarvin = null;
        }

        var outsideMarvinFlow = ProcessPageType(true, divID, _prevMarvin, _currentMarvin, _nextMarvin);
        if (outsideMarvinFlow){
            HideLoader();
            setTimeout(function(){
                _isMoving = false;
                $('.marvinBottom').css('opacity', '');
            }, 500);
        }
        else {
            // populate the page with answers!
            LoadUserAnswers(true, _currentMarvin, function(answers){
                if (answers !== null)
                    PopulateControls(answers, divID);

                ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin)
                MovePage(true);
                setTimeout(function(){
                    _isMoving = false;
                    $('.marvinBottom').css('opacity', '');
                }, 500);

                HideLoader();
            });
        }
    });
}

function GetAnswerByControl(array, controlID){
    for (var i = 0; i < array.length; i++) {
        var a = array[i];
        if (a.ControlID == controlID)
            return a;
    }

    return null;
}

function GetControl(controls, id){
    for (var i = 0; i < controls.length; i++) {
        var c = controls[i];
        if (c.ID == id)
            return c;
    }

    return null;
}

function GetPageAnswerList(pageID){
    for (var i = 0; i < _userAnswers.length; i++) {
        var a = _userAnswers[i];
        if (a.PageID == pageID)
            return a;
    }

    return null;
}

function GetUserAnswer(answerList, id){
    if (answerList === null)
        return null;

    for (var i = 0; i < answerList.length; i++) {
        var a = answerList[i];
        if (a.ControlID == id)
            return a;
    }

    return null;
}

function GetVideos(array) {
    var list = [];
    for (var i = 0; i < array.length; i++) {
        var c = array[i];
        if (c.Type == 'video')
            list.push(c);
    }

    return list;
}

function InitializeLightbox(){
    // Lightbox...
    // $('.expandable img').on('click', function(){
    //  NoScroll();
    //  overlayOn();
    //  activityIndicatorOn();
    //
    //  var src = $(this).attr('src');
    //  var ex = $('#expander');
    //  var img = $('#expandedImg');
    //  img.attr('src', src);
    //
    //  ex.fadeIn('500', function(){
    //      activityIndicatorOff();
    //  });
    //
    //  $('#closeExpander').one('click', function(){
    //      AllowScroll();
    //      $('#expander').fadeOut(300, function(){
    //      });
    //      overlayOff();
    //  });
    // });
}

function InitializeLinkedCheckbox(){
    $('.roundedCheckbox input').on('click', function(){
        var checked = $(this).is(':checked');
        var assessment = $(this).closest('.linkedCheckbox').find('.linkedAssessment');
        if (checked) {
            assessment.addClass('activeLink');
            // setTimeout(function(){ $.scrollTo(assessment, 300); }, 200);
        }
        else {
            assessment.removeClass('activeLink');
			
			var ddlID = assessment.find('.dropDownList').attr('id');
            $('#' + ddlID + ' .hdnSelectedID').val('');
            $('#' + ddlID + ' .motivationBtn').addClass('opacity50');
            $(this).prop('checked', true);
            document.getElementById(this.id).checked = false;
            // setTimeout(function(){ $.scrollTo(this, 300); }, 200);
        }
    });
}

function InitializeVideo(controls){
    var list = $('#' + _visiblePage + 'Page .video');
    var controlList = GetVideos(controls);

    for (var i = 0; i < list.length; i++) {
        var control = controlList[i];
        var video = $(list[i]);
        var img = video.find('img');
        var play = video.find('.playControl');

        // pull out the vimeo link
        var path = control.Value;
        var vimeo =  path.substr(path.lastIndexOf('/') + 1);

        VideoClick(play, vimeo, path, 'content');
    }
}

function InitializeInsert(){
    $('.marvinPage .insert').off();
    $('.marvinPage .insert').on('click', function(){
        var id = $(this).find('.hdnInsertPageID').val();
        ShowLoader();
        $.ajax({
            url: config.Path + '/marvin/getpage',
            data: { pageID: id, userID: _user.ID }
        }).done(function(data){
            HideLoader();
            $('#insertPage').show();
            LoadPageControls(_prevMarvin, data, _nextMarvin, null, true, true);
        });
    });
}

function LoadBranchOptions(control){
    // we need to load all of the options that the branch gives us and put them in the cache
    $.ajax({
        url: config.Path + '/marvin/getbranchoptions',
        data: { controlID: control.ID }
    }).done(function(data){
        if (data === null) {
            HandleError("LoadBranchOptions returned null");
            return;
        }

        for (var i = 0; i < data.length; i++) {
            var branch = data[i];
            _branchOptions.push(branch);
        };
    });
}

function LoadControlData(control, callback){
    switch (control.Type) {
        case 'eomfeedback':
            // if (_eomFeedback.length == 0) {
            //  // see if we can reconstitute the feedback
            //  $.ajax({
            //      url: config.Path + '/marvin/loadeomfeedback',
            //      data: { controlID: control.ID }
            //  }).done(function(data){
            //
            //  });
            // }

            callback();
            break;
        case 'feedback':

            callback();
            break;
        default:
            callback();
    }
}

function LoadDiscoveryReportPage(prevPage, currentPage, nextPage, divID) {
    var html = LoadPageControls(prevPage, currentPage, nextPage, divID, false, false);
    SaveReport(html, 'discovery');
    GetReports(); // in mevii-reports
    //
    // BuildLongDiscoveryReport();
}

function LoadFeedback(divID){
    // so here is how feedback display works...
    // if a page has 1 or more assessments on it, then we store all of those assessments in a small object we call ASF.
    // (in the method mevii-contentengine-controls/ValidateAndLoadControls)
    // ASF has the following properties:
    // PageID - the page the feedbacks belong to
    // Short - an array of short feedbacks that the user has selected
    // FeedbackPage - the id of the page that we dumped the shorts on. If it is null, then that means we haven't shown it yet
    // and therefore we need to dump it and save the current page id as the Feedback Page.

    // Users can move back and forth and we simply edit the ASF in memory rather than add a new one.
    // We keep a list of all ASFs in _assessmentShortFeedback which we use here to display all of the feedbacks that were
    // selected by the user.

    var html = "";
    // first page feedback...
    for (var i = 0; i < _pageFeedback.length; i++) {
        var pf = _pageFeedback[i];

        if (pf.FeedbackPage === null || pf.FeedbackPage == _currentMarvin.ID){
            pf.FeedbackPage = _currentMarvin.ID;
            html += '<div class="pageFeedback">' + pf.Text + '</div>';
        }
    }

    // now assessment feedback
    for (var i = 0; i < _assessmentShortFeedback.length; i++) {
        var asf = _assessmentShortFeedback[i];

        if (asf.FeedbackPage === null || asf.FeedbackPage == _currentMarvin.ID) {
            asf.FeedbackPage = _currentMarvin.ID;

            html += BuildFeedbackHtml(asf);
        }
    }

    if (_assessmentShortFeedback.length == 0)
        html += 'EMPTY';

    $(divID).append(html);
}

function LoadEndOfModuleReportPage(prevPage, currentPage, nextPage, divID) {
    $(divID).html("<div class='wait'>Customizing feedback...just one sec.</div>");
    ShowLoader();
    BuildEndOfModuleReport(currentPage, function(reportHtml){
        $(divID).html("");
        BuildPageHtml(divID, reportHtml, prevPage, currentPage, nextPage, null);
        HideLoader();
    });
}

function LoadEndPracticeSessionPage(prevPage, currentPage, nextPage, divID) {
    var html = '<div class="pageFeedback">';

    // have we stored this feedback before?
    for (var i = 0; i < _practiceSessionFeedback.length; i++) {
        var psf = _practiceSessionFeedback[i];
        if (psf.PageID != currentPage.ID)
            continue;

        html += psf.Feedback + '</div>';
        $(divID).append(html);
        return;
    }


    ShowLoader();

    $.ajax({
        url: config.Path + '/practicesession/getcontrols',
        data: { pageID: currentPage.ID }
    }).done(function(data){
        HideLoader();

        if (data === null){
            HandleError("Practice Session/Get Controls boom boom.");
            return;
        }

        var threshold = data.Threshold;
        var feedback = "";

        if (_practiceSessionScore >= threshold)
            feedback = Encoder.htmlDecode(data.GoodFeedback);
        else
            feedback = Encoder.htmlDecode(data.BadFeedback);

        html += feedback;
        html += '</div>';

        $(divID).append(html);

        // ok...now we need to store it so we can show it again later
        var esp = { PageID: currentPage.ID, Feedback: feedback }
        _practiceSessionFeedback.push(esp);

        // get ready for the next practice session
        _practiceSessionScore = 0;

        ManageNavButtons(prevPage, currentPage, nextPage)
    });
}

function LoadGoalSettingToolPage(prevPage, currentPage, nextPage, id) {
    ShowLoader();

    $.ajax({
        url: config.Path + '/goalsetting/getpagecontrols',
        data: { pageID: currentPage.ID }
    }).done(function(data){
        _isEmbeddedGST = true;
        _GSTPageControls = data;

        if (data.StartNew){
            HideLoader();
            //preparing the GST page
            ResetGoalHomePage();
            $('.goalHomeHeader').html('Create a New Goal');
            MovePageLeft('#pageGoalSettingHome', _currentPage);
        }
        else {
            $.ajax({
                url: config.Path + '/goalsetting/getlatest',
                data: { userID: _user.ID }
            }).done(function(data){
                HideLoader();

                if (data === null || data.length === 0){
                    ResetGoalHomePage();
                    $('.goalHomeHeader').html('Create a New Goal');
                }
                else {
                    var a = [];
                    a.push(data);
                    _goalIDEditing = data.ID;
                    $('.goalHomeHeader').html('Update Your Goal');
                    EditGoal(a); // in mevii-goalsetting.js
                }

                MovePageLeft('#pageGoalSettingHome', _currentPage);
            });
        }

        ManageNavButtons(prevPage, currentPage, nextPage);
    });
}

function LoadLogicTools(pageID, callback){
    // get the control logic tool, then the page logic tool
    $.ajax({
        url: config.Path + '/marvin/getcontrollogic',
        data: { userID: _user.ID, pageID: pageID }
    }).done(function(controlLogic){
        if (controlLogic === null){
            HandleError("/marvin/getcontrollogic returned null");
            return;
        }

        _logicTools.push(controlLogic);
        $.ajax({
            url: config.Path + '/marvin/getpagelogic',
            data: { userID: _user.ID, pageID: pageID }
        }).done(function(pageLogic){
            // console.log('Page Logic: ' + JSON.stringify(pageLogic));

            if (pageLogic === null){
                HandleError("/marvin/getpagelogic returned null");
                return;
            }

            _logicTools.push(pageLogic);
            callback();
        });
    });
}

function LoadModuleInfo(pageID, callback) {
    $.ajax({
        url: config.Path + '/marvin/getmodulebypage',
        data: { pageID: pageID }
    }).done(function(data){
        if (data === null) {
            HandleError("GetModuleByPage returned null");
            _currentModule = null;
            _pageCount = 0;
            return;
        }

        _currentModule = data;

        if (data.Pages !== null)
            _pageCount = data.Pages.length;
        else
            _pageCount = 0;

        if (typeof callback != "undefined" && callback !== null)
            callback();
    });
}

function LoadMotivationToolPage(prevPage, currentPage, nextPage, id) {
    ShowLoader();

    $.ajax({
        url: config.Path + '/motivation/getpagecontrols',
        data: { pageID: currentPage.ID }
    }).done(function(data){
        if (data === null){
            HandleError("Motivation/GetPageControls...boom.");
            return;
        }

        _isEmbeddedMotivation = true;
        LoadMotivation(function(){
            switch (data.StartPage) {
                case 1:
                    MovePageLeft('#pageMotivationTool', _currentPage);
                    break;
                case 2:
                    MovePageLeft('#pageMotivationGoal', _currentPage);
                    break;
                case 3:
                    MovePageLeft('#pageMotivationStrengths', _currentPage);
                    break;
            }

            ManageNavButtons(prevPage, currentPage, nextPage);
        }); // this is in mevii-motivation.js
    });
}

function LoadMotivationReportPage(prevPage, currentPage, nextPage, divID) {
    $.ajax({
        url: config.Path + '/motivation/gettool',
        data: { userID: _user.ID }
    }).done(function(data){
        HideLoader();
        if (data === null){
            HandleError('motivation/gettool returned null');
            return;
        }

        _motivationTool = data;
        if (_pick3Feedback === null || _pick3Feedback.length === 0)
        {
            ShowLoader();

            $.ajax({
                url: config.Path + '/marvin/getpick3feedback',
                data: { userID: _user.ID }
            }).done(function(data){
                HideLoader();

                if (data === null){
                    HandleError("marvin/getpick3feedback returned null...");
                    return;
                }

                for (var i = 0; i < data.length; i++) {
                    var feedback = data[i];
                    var array = [];
                    array.push(feedback);
                    var p3f = { PageID: currentPage.ID, Short: array, FeedbackPage: null };
                    _pick3Feedback.push(p3f);
                }

                var html = LoadPageControls(prevPage, currentPage, nextPage, divID, false, false);
                SaveReport(html, 'motivation');

                BuildAndSaveLongMotivationReport();
                _motivationTool = null;
                GetReports(); // in mevii-reports
            });
        }
        else {
            var html = LoadPageControls(prevPage, currentPage, nextPage, divID, false, false);
            SaveReport(html, 'motivation');

            BuildAndSaveLongMotivationReport();
            _motivationTool = null;
            GetReports(); // in mevii-reports
        }

    });

}

function LoadPageControls(prevPage, currentPage, nextPage, divID, isInsert, useCache){
    // guaranteeing sort order
    var controls = currentPage.Controls.sort(function(obj1, obj2) {
        return obj1.Order - obj2.Order;
    });

    var html = "<div class='marvinPage' data-page='" + currentPage.ID + "'>";

    // clear out the branch data...
    _branchControlID = null;
    _branchOptions = [];

    for (var i = 0; i < controls.length; i++) {
        var control = controls[i];
        if (!CheckControlBuyer(control))
            continue;

        // console.log(control.Type÷);
        switch (control.Type) {
            case 'assessment':
                html += RenderAssessment(control);
                break;
            case 'branch':
                _branchControlID = control.ID;
                LoadBranchOptions(control);
                html += RenderBranch(control);
                break;
            case 'content':
                html += RenderStaticContent(control);
                break;
            case 'header':
                html += RenderHeader(control);
                break;
            case 'image':
                html += RenderImage(control, useCache);
                break;
            case 'textbox':
                html += RenderTextbox(control);
                break;
            case 'dropdown':
                html += RenderDropdown(control);
                break;
            case 'checkbox':
                html += RenderCheckbox(control);
                break;
            case 'linkedcheckbox':
                html += RenderLinkedCheckbox(control);
                break;
            case 'video':
                html += RenderVideo(control);
                break;
            case 'eom':
                html += RenderEOM(control);
                break;
            case 'pick3':
                html += RenderPick3(control);
                break;
            case 'high':
                html += RenderHigh(control);
                break;
            case 'medium':
                html += RenderMedium(control);
                break;
            case 'low':
                html += RenderLow(control);
                break;
            case 'matters':
                html += RenderMatters(control);
                break;
            case 'goal':
                html += RenderGoal(control);
                break;
            case 'strength':
                html += RenderStrength(control);
                break;
            case 'orderedfeedback':
                html += RenderOrderedFeedback(control);
                break;
            case 'feedback':
                html += RenderFeedback(control);
                break;
            case 'eomfeedback':
                html += RenderEOMFeedback(control);
                break;
            case 'toolusage':
                html += RenderToolUsage(control);
                break;
            case 'controllogic':
                html += RenderControlLogic(control);
                break;
            case 'pagelogic':
                html += RenderPageLogic(control);
                break;
            case 'insert':
                html += RenderInsert(control);
                break;
        }
    }

    html += '</div>';

    if (isInsert === true) {
        $('#insertPage .html').html(html);
        InitializeDropDowns();
        MovePageUp('#insertPage', null, true);
    }
    else {
        BuildPageHtml(divID, html, prevPage, currentPage, nextPage, controls);
    }

    return html;
}

function LoadPick3Text(){
    // so the pick 3 that the user has selected is used in every EOM so we load it up early just in case we need it during the user's session
    $.ajax({
        url: config.Path + '/marvin/getpick3text',
        data: { userID: _user.ID }
    }).done(function(data){
        if (data === null) {
            HandleError("getpick3text returned null");
        }
        else {
            // this comes back with a combined array. Each item has the pick 3 text and stem inside
            _pick3Text = [];
            _pick3Stems = [];
            for (var i = 0; i < data.length; i++) {
                var split = data[i].split('*||*');
                _pick3Text.push(split[0]);
                _pick3Stems.push(split[1]);
            }
        }
    });
}

function LoadToolUsage(callback) {
    ShowLoader();

    $.ajax({
        url: config.Path + '/marvin/gettoolusage',
        data: { userID: _user.ID }
    }).done(function(data){
        HideLoader();

        if (data === null){
            HandleError("/marvin/gettoolusage returned null");
            _usedTools = false;
        }
        else {
            _usedTools = data;
        }

        if (typeof callback != "undefined" && callback !== null)
            callback();
    });
}

function LoadUserAnswers(isNext, current, callback){
    // if this page isn't savable, then we are done here...
    if (!current.IsSavable){
        if (typeof callback != "undefined" && callback !== null)
            callback(null);

        return;
    }

    var answers = GetPageAnswerList(current.ID);
    if (answers !== null) {
        // console.log('Answers for this page: ' + JSON.stringify(answers));

        if (typeof callback != "undefined" && callback !== null)
            callback(answers.Answers);

        return;
    }

    // console.log('hitting API to get answers');

    // we don't have the answers in memory...need to go get them.
    // it is a POST to avoid caching this one...
    $.ajax({
        url: config.Path + '/marvin/getuseranswers',
        type: 'POST',
        data: { ID: current.ID }
    }).done(function(data){
        if (data === null)
            HandleError("Something bad happened when getting user answers.");
        else {
            var a = { PageID: current.ID, Answers: data };
            _userAnswers.push(a);
        }

        // console.log('Answers Retrieved: ' + JSON.stringify(data));

        if (typeof callback != "undefined" && callback !== null)
            callback(data);
    });
}

//changes of problem solving tool to be added here
function ManageNavButtons(prevPage, currentPage, nextPage) {
    console.log('ManageNavButtons');

    if (_tipSheet !== null){
        // $('#' + _visiblePage + 'Page .btnPrev').hide();
        $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
        // $('#' + _visiblePage + 'Page .btnNext').hide();
        $('#' + _visiblePage + 'Page .btnNext').addClass('hidden');
        $('#' + _visiblePage + 'Page .btnCloseTipSheet').show();
        $('#' + _visiblePage + 'Page .progressBlock').hide();

        return;
    }

    $('#' + _visiblePage + 'Page .btnCloseTipSheet').hide();
    $('#' + _visiblePage + 'Page .progressBlock').show();

    // by default...show the prev button
    $('#' + _visiblePage + 'Page .btnPrev').removeClass('hidden');

    if (_changedModules) {
        $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
    }
    else if (typeof prevPage != "undefined" && prevPage !== null) {
        if (_tocStart !== null && currentPage.ID == _tocStart) {
            // you can't go back before where you came in at in the TOC
            console.log('hide prev TOC');
            $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
        }
        else {
            switch (prevPage.PageType.Name) {
                case "Feedback":
                case "Change Tool":
                case "End of Module Report":
                case "Goal Setting Tool":
                case "Journal Entry Tool":
                case "Motivation Tool":
                case "Motivation Report":
                case "Discovery Report":
                case "Matching Tool":
                case "Previsit Tool":
                case "Pleasant Activities Tool":
                case "Inner Circle Tool":
                case "Support Resources Tool":
                    $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
                    break;
            }
        }
    }
    else {
        $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
    }

    if (typeof nextPage != "undefined" && nextPage !== null){
        switch (nextPage.PageType.Name) {
            // case "Goal Setting Tool":
            // case "Motivation Tool":
            //  $('#' + _visiblePage + 'Page .btnNext').hide();
            //      break;
            default:
                $('#' + _visiblePage + 'Page .btnNext').removeClass('hidden');
                break;
        }
    }
    else if (_isWatsonArticle && (typeof nextPage == "undefined" || nextPage === null)) {
        $('#' + _visiblePage + 'Page .btnNext').addClass('hidden');
        $('#' + _visiblePage + 'Page .btnWatsonEnd').show();
    }
    else {
        $('#' + _visiblePage + 'Page .btnNext').addClass('hidden');
    }

    switch (currentPage.PageType.Name) {
        case "Goal Setting Tool":
        case "Journal Entry Tool":
        case "Motivation Tool":
        case "Matching Tool":
        case "Previsit Tool":
        case "Pleasant Activities Tool":
        case "Inner Circle Tool":
        case "Problem Solving Tool":
            $('#' + _visiblePage + 'Page .btnPrev').addClass('hidden');
            $('#' + _visiblePage + 'Page .btnNext').addClass('hidden');
            break;
    }
}

function MovePage(moveForward){
    var type = _currentMarvin.PageType.Name;

    // goin' back...
    if (!moveForward && _nextMarvin !== null){
        // was the page we were just on a popup? if so, we need to move down.
        if (_nextMarvin.PageType.Name == 'Popup'){
            MovePageDown('#' + _visiblePage + 'Page', _currentPage);
            return;
        }
    }

    // is the page we are leaving a popup? if so, move it out of the way first...
    if (moveForward && _prevMarvin !== null){
        if (_prevMarvin.PageType.Name == 'Popup'){
            MovePageDown('#' + _visiblePage + 'Page', _currentPage);

            return;
        }
    }

    switch (type) {
        case 'Popup':
            MovePageUp('#' + _visiblePage + 'Page', _currentPage);
            break;
        default:
            if (moveForward)
                MovePageLeft('#' + _visiblePage + 'Page', _currentPage);
            else
                MovePageRight('#' + _visiblePage + 'Page', _currentPage);
            break;
    }
}

function MoveToolPage(moveForward, to){
    ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin);

    // goin' back...
    if (!moveForward && _nextMarvin !== null){
        // was the page we were just on a popup? if so, we need to move down.
        if (_nextMarvin.PageType.Name == 'Popup'){
            MovePageDown(to, _currentPage);
            return;
        }
    }

    // is the page we are leaving a popup? if so, move it out of the way first...
    if (moveForward && _prevMarvin !== null){
        if (_prevMarvin.PageType.Name == 'Popup'){
            MovePageDown(to, _currentPage);

            return;
        }
    }

    if (moveForward)
        MovePageLeft(to, _currentPage);
    else
        MovePageRight(to, _currentPage);
}

function PopulateControls(answers, divID){
    var controls = $(divID + ' .control');
    for (var i = 0; i < controls.length; i++) {
        var c = $(controls[i]);
        if (!CheckControlBuyer(c))
            continue;

        var answerID = c.attr('id');
        var a = GetUserAnswer(answers, answerID);

        if (a === null)
            continue;

        if (c.hasClass('assessment') || c.hasClass('dropdown')) {
            var selected = c.find('.hdnSelectedID');
            PopulateDropDowns(selected, a.Answer);
        }
        else if (c.hasClass('branch')){
            var selected = c.find('.hdnSelectedID');
            // OLD: a branch answer is 2 parts: pageID *||* text
            // NEW: a branch answer is just the pageID
            // either way...we just need the PageID now...

            var items = a.Answer.split('*||*');
            var pageID = items[0].trim()
            PopulateDropDowns(selected, pageID);
        }
        else if (c.hasClass('checkbox')){
            var cbList = c.find('.check');
            var items = a.Answer.split('*||*');

            for (var j = 0; j < cbList.length; j++) {
                var cb = $(cbList[j]);
                var checked = items[j];

                if (checked == "1"){
                    cb.find('input').prop('checked', true);
                }
            }
        }
        else if (c.hasClass('eom')) {
            // EOMs have compbined answers...
            var combinedAnswer = a.Answer.split('*||*');
            var selectList = c.find('select');
            for (var j = 0; j < selectList.length; j++) {
                var ddl = $(selectList[j]);
                if (j > combinedAnswer.length) {
                    break;
                }

                ddl.val(combinedAnswer[j].trim());
            }
        }
        else if (c.hasClass('linkedCheckbox')){
            if (a !== null && a.Answer !== null) {
                var assessment = a.Answer;

                if (typeof assessment != "undefined" && assessment !== null) {
                    var checkbox = c.find('input');
                    checkbox.prop('checked', true);

                    c.find('.linkedAssessment').addClass('activeLink');
                    c.find('select').val(assessment.trim());
                    var selected = c.find('.hdnSelectedID');
                    PopulateLinkedDropDowns(selected, assessment.trim());
                }
            }
        }
        else if (c.hasClass('textbox')){
            if (a.Answer !== null)
                c.find('input').val(a.Answer.trim());
        }
    }
}

function ProcessPageType(moveForward, divID, prev, current, next){
    $(divID).html('');

    if (current.IsEndOfProgram){
        // this is the last page! so...we need to do some cleanup
        $.ajax({
            url: config.Path + '/marvin/complete',
            data: { PageID: current.ID, UserID: _user.ID },
            type: 'POST'
        });

        CompleteModule(current.ModuleID);
    }

    switch (current.PageType.Name){
        case "Change Tool":
            _isEmbeddedChangeTool = true;
            StartNewEvent(); // in mevii-feelings.js
            MoveToolPage(moveForward, '#pageFeelingsNewEventPage');
            return true;
        case "Discovery Report":
            LoadDiscoveryReportPage(prev, current, next, divID);
            return false;
        case "End of Module Report":
            LoadEndOfModuleReportPage(prev, current, next, divID);
            return false;
        case "End Practice Session":
            LoadEndPracticeSessionPage(prev, current, next, divID);
            return false;
        case "Feedback":
            // with feedback pages we need to dump out the assessments, load the controls, add email button
            LoadPageControls(prev, current, next, divID, false, true);
            LoadFeedback(divID);
            // $(divID).append('<button class="btnEmailFeedback">Email</button>');
            return false;
        case "Goal Setting Tool":
            LoadGoalSettingToolPage(prev, current, next, divID);
            return true;
        case "Inner Circle Tool":
            _isEmbeddedIC = true;
            LoadInnerCircle();
            LoadMutualSupport();
            MoveToolPage(moveForward, '#pageInnerCircle');
            return true;
        case "Journal Entry Tool":
            _isEmbeddedJournal = true;
            ResetJournalTool();
            MoveToolPage(moveForward, '#pageJournalCreate');
            return true;
        case "Motivation Tool":
            _isEmbeddedMotivation = true;
            LoadMotivationToolPage(prev, current, next, divID);
            return true;
        case "Motivation Report":
            LoadMotivationReportPage(prev, current, next, divID);
            return false;
        case "Matching Tool":
            _isEmbeddedMatching = true;
            GetMatchingTool();
            MoveToolPage(moveForward, '#pageMatchingHome');
            return true;
        case "Pick 3":
            LoadPageControls(prev, current, next, divID, false, true);
            InitializeLinkedCheckbox();
            return false;
        case "Pleasant Activities Tool":
            _isEmbeddedPA = true;
            LoadPleasantActivities(function(){
                MoveToolPage(moveForward, '#pagePleasantHome');
            });
            return true;
        case "Post Program Report":
            ShowLoader();
            LoadLogicTools(current.ID, function(){
                LoadPageControls(prev, current, next, divID, false, true);
                _logicTools = [];
                HideLoader();
            });
            return false;
        case "Previsit Tool":
            _isEmbeddedPrevisit = true;
            GetPrevisitTool();
            MoveToolPage(moveForward, '#pagePrevisitTool');
            return true;
        case "Support Resources Tool":
            _isEmbeddedResources = true;
            GetMeviiResources();
            GetSupportResourceText();
            MoveToolPage(moveForward, '#pageResourcesTool');
            return true;
        case "Problem Solving Tool":
            _isEmbeddedResources = true;
            _callProblemTool = "pageType";
            ClearProblemSolvingTool();
            MoveToolPage(moveForward, '#pageProblemSolvingProblem');
            return true;
        case "Assertiveness Tool":
            /*_assertiveID = "";
            _isEmbeddedResources = true;
            ClearAssertiveForm();
            _callAssertiveTool = "pageType";
            MoveToolPage(moveForward, '#pageAssertive');
            return true;*/
            _callAssertiveTool = "pageType";
            ShowOpportunities();
            ShowyClose('#pageAssertive');
            return true;
        default:
            LoadPageControls(prev, current, next, divID, false, true);
            return false;
    }
}

function ProcessLowMediumHigh(control, type){
    var html = "";

    var isLowEmpty = true, isMediumEmpty = true, isHighEmpty = true;

    for (var i = 0; i < _assessmentShortFeedback.length; i++) {
        var asf = _assessmentShortFeedback[i];
        var array = [];

        if (asf.FeedbackPage === null || asf.FeedbackPage == _currentMarvin.ID) {
            asf.FeedbackPage = _currentMarvin.ID;

            for (var j = 0; j < asf.Short.length; j++) {
                var short = Encoder.htmlDecode(asf.Short[j]);
                var score = short.match(/\[\d\]/);

                // no code? We give 'em 0
                if (score === null) {
                    score = 0;
                }
                else {
                    score = score[0].replace('[', '');
                    score = score.replace(']', '');
                }

                switch(type){
                    case "high":
                        if (score >= 4 ) {
                            array.push(ClearFeedbackShortcodes(short));
                            isHighEmpty = false;
                        }
                        break;
                    case "medium":
                        if (score == 2 || score == 3 ) {
                            array.push(ClearFeedbackShortcodes(short));
                            isMediumEmpty = false;
                        }
                        break;
                    case "low":
                        if (score < 2 ) {
                            array.push(ClearFeedbackShortcodes(short));
                            isLowEmpty = false;
                        }
                        break;
                }
            }
        }

        if (type == 'high' && isHighEmpty ||
            type == 'medium' && isMediumEmpty ||
            type == 'low' && isLowEmpty) {

            isHighEmpty = false;
            isMediumEmpty = false;
            isLowEmpty = false;

            html += '<div class="emptyFeedback">You didn’t list any activities in this category.</div>';
        }
        else {
            html += '<div id="' + control.ID + '" class="control ' + type + 'Feedback">' + array.join('<br/>') + '</div>';
        }
    }

    return html;
}

function RenderAssessment(control) {
     var html = '<div id="' + control.ID + '" data-code="' + control.Code + '" class="control assessment">';
    if (control.Prompt !== null)
        html += '<div class="prompt">' + control.Prompt + '</div>';
  
    var controlID = CreateGuid();
    var options = control.Value.split('*||*');
    var score = control.Score.split('*||*');
    var shortList = control.ShortFeedback.split('*||*');

    html +='<div id="'+ controlID+'" class="dropDownList">';
    html += '<input type="hidden" class="hdnSelectedID" />';

    for (var i = 0; i < options.length; i++) {
        var o = options[i];
        var s = score[i];
        html += '<div class="motivationBtn opacity50" id="' + o + '" data-score="' + s + '"><span class="motivationTitle">' + o + '</span></div>';
    }
    
    html += '</div>';
    html += '</div>';

    return html;
}

function RenderBranch(control){
    var html = '<div id="' + control.ID + '" data-code="' + control.Code + '" class="control branch">';
    html += '<div class="prompt">' + control.Prompt + '</div>';

    var controlID = CreateGuid();
    var options = control.Value.split('*||*');
    var actions = control.Action.split('*||*');
    var scores = null;

    // trying to make branches wrap if possible...
    // is this a long branch?
    var isShort = true;
    for (var i = 0; i < options.length; i++) {
        var o = options[i].trim();
        if (o.length > 15){
            isShort = false;
            break;
        }
    }


    html += '<div id="' + controlID + '" class="dropDownList ';
    if (isShort)
        html += ' row ';
    
    html += '">';
    html += '<input type="hidden" class="hdnSelectedID" />';
   
    if (control.score !== null){
        scores = control.Score.split('*||*');
    }

    for (var i = 0; i < options.length; i++) {
        var o = options[i];
        var a = actions[i];
        var s = null;
        if (scores !== null)
            s = scores[i];

        if (isShort)
            html += '<div class="col-xs-6">';
        
        html += '<div class="motivationBtn opacity50" data-score="' + s + '"  data-action="' + a.trim() + '"  id="' + a.trim() + '"><span class="motivationTitle">' + o.trim() + '</span></div>';

        if (isShort)
            html += '</div>';
    }

    html += '</div>';
    html += '</div>';

    if (control.IsRequired)
        html += '<span class="required">*</span>';

    html += '</div>';
    return html;
}

function RenderCheckbox(control) {
    var html = '<div id="' + control.ID + '" class="control checkbox">';
    html += '<div class="prompt">' + control.Prompt + '</div>';

    var codes = control.Code.split('*||*');
    var options = control.Value.split('*||*');

    for (var i = 0; i < codes.length; i++) {
        var c = codes[i];
        var o = options[i];

        html += '<div class="check checkbox">';
        html += '<label><input id="' + control.ID + '" type="checkbox" data-code="' + c + '" />';
        html += '<span for="' + control.ID + '" class="checkText">' + o + '</span></label>';
        html += '</div>';
    }

    // if (control.IsRequired)
    //  html += '<span class="required">*</span>'

    html += '</div>';
    return html;
}

function RenderControlLogic(control) {
    if (_logicTools === null) {
        return "";
    }

    var html = '<div id="' + control.ID + '" class="control controlLogic">';

    var cltsArray = _logicTools[0];
    for (var i = 0; i < cltsArray.length; i++) {
        // the API brings back a custom object which contains the Control Logic
        // as well as the user's baseline and outcome scores for the associated controls

        var clts = cltsArray[i];
        var controlLogic = clts.ControlLogic;
        var baseline = clts.BaselineScore;
        var outcome = clts.OutcomeScore;

        var value = baseline - outcome;

        if (value != 0) {
            var lowRangeArray = controlLogic.LowRange.split('*||*');
            var highRangeArray = controlLogic.HighRange.split('*||*');
            var contentArray = controlLogic.Content.split('*||*');

            for (var j = 0; j < lowRangeArray.length; j++) {
                var lowRange = lowRangeArray[j];
                var highRange = highRangeArray[j];
                if (value >= lowRange && value <= highRange)
                    html += Encoder.htmlDecode(contentArray[j]);
            }
        }
        else {
            var lowRangeArray = controlLogic.ZeroLowRange.split('*||*');
            var highRangeArray = controlLogic.ZeroHighRange.split('*||*');
            var contentArray = controlLogic.ZeroContent.split('*||*');

            for (var j = 0; j < lowRangeArray.length; j++) {
                var lowRange = lowRangeArray[j];
                var highRange = highRangeArray[j];

                if (baseline >= lowRange && baseline <= highRange)
                    html += Encoder.htmlDecode(contentArray[j]);
            }
        }
    }

    html += '</div>';
    return html;
}

function RenderDropdown(control) {
  
    var html = '<div id="' + control.ID + '" data-code="' + control.Code + '" class="control dropdown">';
    html += '<div class="prompt">' + control.Prompt + '</div>';
    var controlID = CreateGuid();
    html += '<div id="' + controlID + '" class="dropDownList">';
    html += '<input type="hidden" class="hdnSelectedID" />';
    var options = control.Value.split('*||*');
    for (var i = 0; i < options.length; i++) {
        var o = options[i];
        // html += '<option data-score="' + s + '">' + o + '</option>';
        html += '<div class="motivationBtn opacity50" id="' + o.trim() + '" data-score="' + o.trim() + '"><span class="motivationTitle">' + o.trim() + '</span></div>';
    }
    
    html += '</div>';
    html += '</div>';

    return html;
}

function RenderEOM(control){
    // so the EOM is a bit odd...it only works if the user has saved the pick 3 first...
   
    if (_pick3Text === null)
        return '';
    var html = '<div id="' + control.ID + '"  class="control eom">';
    for (var i = 0; i < _pick3Text.length; i++) {
        var p3 = _pick3Text[i];
        html += '<div class="prompt">' + p3 + '</div>';
        var controlID = CreateGuid();
        html += '<div id="' + controlID + '" data-code="' + control.Code + '" class="dropDownList">';
        html += '<input type="hidden" class="hdnSelectedID" />';
        var options = control.Value.split('*||*');
        var shortList = control.ShortFeedback.split('*||*');

        for (var j = 0; j < options.length; j++) {
            var o = options[j];
            // html += '<option data-score="' + s + '">' + o + '</option>';
            html += '<div class="motivationBtn opacity50" id="' + o.trim() + '" data-score="' + o.trim() + '"><span class="motivationTitle">' + o.trim() + '</span></div>';
        }

        html += '</div>';
    }
    html += '</div>';





    //var html = '';
    //html += '<div id="' + control.ID + '" class="control eom">';
    //for (var i = 0; i < _pick3Text.length; i++) {
    //    var p3 = _pick3Text[i];

    //    html += '<div class="prompt">' + p3 + '</div>';
    //    html += '<select data-code="' + control.Code + '"><option data-score=""> -- Select -- </option>';

    //    var options = control.Value.split('*||*');
    //    var shortList = control.ShortFeedback.split('*||*');

    //    for (var j = 0; j < options.length; j++) {
    //        var o = options[j];
    //        html += '<option>' + o.trim() + '</option>';
    //    }

    //    html += '</select>';
    //}

    //html += '</div>';

    return html;
}

function RenderEOMFeedback(control) {
    var html = "<div id='" + control.ID + "' class='control eomfeedback'>";

    for (var i = 0; i < _eomFeedback.length; i++) {
        var asf = _eomFeedback[i];

        if (asf.FeedbackPage === null || asf.FeedbackPage == _currentMarvin.ID) {
            asf.FeedbackPage = _currentMarvin.ID;
            for (var j = 0; j < asf.Short.length; j++) {
                var feedback = Encoder.htmlDecode(asf.Short[j]);
                // inside of the feedback admins put in ##STEM## where they want to stick the stem for this pick 3, we need to replace it
                feedback = feedback.replace('##STEM##', _pick3Stems[j]);

                html += '<div class="shortFeedback">' + feedback + '</div>';
            }
        }
    }

    if (_eomFeedback.length == 0)
        html += 'No EOM Feedback';

    html += '</div>';

    return html;
}

function RenderFeedback(control) {
    var html = "<div id='" + control.ID + "' class='control feedback'>";
    // first page feedback...
    for (var i = 0; i < _pageFeedback.length; i++) {
        var pf = _pageFeedback[i];

        if (pf.FeedbackPage === null || pf.FeedbackPage == _currentMarvin.ID){
            pf.FeedbackPage = _currentMarvin.ID;
            html += '<div class="pageFeedback">' + pf.Text + '</div>';
        }
    }

    // now assessment feedback
    for (var i = 0; i < _assessmentShortFeedback.length; i++) {
        var asf = _assessmentShortFeedback[i];

        if (asf.FeedbackPage === null || asf.FeedbackPage == _currentMarvin.ID) {
            asf.FeedbackPage = _currentMarvin.ID;

            html += BuildFeedbackHtml(asf);
        }
    }

    if (_assessmentShortFeedback.length == 0)
        html += 'No feedback';

    html += '</div>';

    return html;
}

function RenderGoal(control){
    if (_motivationTool === null)
        return '';

    var html = "<div id='" + control.ID + "' class='control goal'>";
    html += '<div class="reason">' + _motivationTool.Reason + '</div>';

    if (_motivationTool.MattersOptional !== null)
        html += '<div class="optional">' + _motivationTool.MattersOptional + '</div>';

    html += "</div>";
    return html;
}

function RenderHeader(control) {
    var html = '<div id="' + control.ID + '" class="control header">';
    html += control.Value;
    html += '</div>';
    return html;
}

function RenderHigh(control) {
    var html = ProcessLowMediumHigh(control, 'high');
    return html;
}

function RenderImage(control, useCache) {
    if (!useCache || !_isNative){
        var html = '<div id="' + control.ID + '" class="control image"><img id="img-' + control.ID + '" src="' + control.Value + '" /></div>';
        return html;
    }
    else {
        CacheImage(control.ID, control.Value); 
        
        var html = '<div id="' + control.ID + '" class="control image"><img id="img-' + control.ID + '" src="" /></div>';
        return html;
    }
    
}

function RenderInsert(control) {
    var html = '<div id="' + control.ID + '" class="control insert">';
    html += '<input type="hidden" class="hdnInsertPageID" value="' + control.Action + '" />';
    html += '<img src="img/assets/whiteArrow.png" />';
    html += '<div class="text">' + control.Value + '</div>';
    html += '</div>';
    return html;
}

function RenderLinkedCheckbox(control) {
  
    var prompt = control.Prompt;
    var html = '<div id="' + control.ID + '" data-code="' + control.Code + '" class="control linkedCheckbox">';

    var code = control.Code;
    var options = control.Value.split('*||*');
    var score = null;
    if (control.Score !== null)
        score = control.Score.split('*||*');

    var stem = control.Action;
    // checkbox!
    html += '<div class="row">';
    html += '<div class="col-xs-8">';
    html += '<div class="label checkText">' + options[0] + '</div>';
    html += '</div><div class="col-xs-4"><div class="roundedCheckbox">';
    html += '<input type="checkbox" data-code="' + code + '" value="None" name="check" id="check-' + control.ID + '" />';
    html += '<label for="check-' + control.ID + '"></label>';
    html += '</div></div></div>';

    // linked assessment
    html += '<div class="linkedAssessment"><div class="inner">';
    html += '<div class="prompt">' + prompt + '</div>';
    var controlID = CreateGuid();
    html += '<div id="' + controlID + '" class="dropDownList">';
    html += '<input type="hidden" class="hdnSelectedID" />';
    for (var i = 0; i < options.length - 1; i++) {
        var o = options[i + 1];
        var s = "";
        if (score !== null)
            s = score[i];
        //html += '<option data-score="' + s + '">' + o + '</option>';
        // html += '<option data-score="' + s + '">' + o + '</option>';
        html += '<div class="motivationBtn opacity50" id="' + s + '" data-score="' + s + '"><span class="motivationTitle">' + o + '</span></div>';
    }
    // html +='<div class="motivationBtn opacity50" id=" atlantic"><span class="motivationTitle">Atlantic</span></div>'
    html += '</div>';
    html += '</div></div></div>';

    return html;
}

function RenderLow(control) {
    var html = ProcessLowMediumHigh(control, 'low');
    return html;
}

function RenderMatters(control){
    if (_motivationTool === null)
        return '';

    var html = "<div id='" + control.ID + "' class='control matters'>";
    html += '<div class="matters">' + _motivationTool.Meaningful1 + '</div>';

    if (_motivationTool.Meaningful2 !== null)
        html += '<div class="matters">' + _motivationTool.Meaningful2 + '</div>';

    if (_motivationTool.Meaningful3 !== null)
        html += '<div class="matters">' + _motivationTool.Meaningful3 + '</div>';

    html += "</div>";
    return html;
}

function RenderMedium(control) {
    var html = ProcessLowMediumHigh(control, 'medium');
    return html;
}

function RenderPageLogic(control) {
    if (_logicTools === null) {
        return "";
    }

    var html = '<div id="' + control.ID + '" class="control pageLogic">';

    var cltsArray = _logicTools[1];
    if (cltsArray === null)
        return "";

    for (var i = 0; i < cltsArray.length; i++) {
        // the API brings back a custom object which contains the Control Logic
        // as well as the user's baseline and outcome scores for the associated controls

        var clts = cltsArray[i];
        var controlLogic = clts.PageLogic;
        var pageOneScore = clts.PageOneScore;
        var pageTwoScore = clts.PageTwoScore;
        var value = pageOneScore - pageTwoScore;

        if (value != 0) {
            var lowRangeArray = controlLogic.LowRange.split('*||*');
            var highRangeArray = controlLogic.HighRange.split('*||*');
            var contentArray = controlLogic.Content.split('*||*');

            for (var j = 0; j < lowRangeArray.length; j++) {
                var lowRange = lowRangeArray[j];
                var highRange = highRangeArray[j];
                if (value >= lowRange && value <= highRange)
                    html += Encoder.htmlDecode(contentArray[j]);
                }
            }
            else {
                var lowRangeArray = controlLogic.ZeroLowRange.split('*||*');
                var highRangeArray = controlLogic.ZeroHighRange.split('*||*');
                var contentArray = controlLogic.ZeroContent.split('*||*');

                for (var j = 0; j < lowRangeArray.length; j++) {
                    var lowRange = lowRangeArray[j];
                    var highRange = highRangeArray[j];

                    if (pageOneScore >= lowRange && pageOneScore <= highRange)
                        html += Encoder.htmlDecode(contentArray[j]);
                    }
                }
            }

            html += '</div>';
            return html;
        }

function RenderPick3(control){
    var html = "<div id='" + control.ID + "' class='control pick3'>";

    for (var i = 0; i < _pick3Feedback.length; i++) {
        p3f = _pick3Feedback[i];

        for (var j = 0; j < p3f.Short.length; j++) {
            var short = Encoder.htmlDecode(p3f.Short[j]);
            // clear out the [#] that may be in the feedback. We aren't using it right now, but we don't
            // want it to show on the screen.
            short = ClearFeedbackShortcodes(short);

            html += '<div class="shortFeedback">' + short + '</div>';
        }
    }

    return html;
}

function RenderStaticContent(control) {
    var contents = Encoder.htmlDecode(control.Value);
    var boxColor = control.Placeholder;
    var html = '<div id="' + control.ID + '" class="control static">';

    if (boxColor !== null)
        html += '<div class="coloredBox" style="background: ' + boxColor + '">';

    html += contents;

    if (boxColor !== null)
        html += '</div>';

    html += '</div>';
    return html;
}

function RenderOrderedFeedback(control) {
    // this orders by the [#] that is stored in the feedback itself...
    var html = "<div id='" + control.ID + "' class='control orderedfeedback'>";
    var sorted = [];

    for (var i = 0; i < _assessmentShortFeedback.length; i++) {
        var asf = _assessmentShortFeedback[i];
        var array = [];

        if (asf.FeedbackPage === null || asf.FeedbackPage == _currentMarvin.ID) {
            asf.FeedbackPage = _currentMarvin.ID;

            for (var j = 0; j < asf.Short.length; j++) {
                var short = Encoder.htmlDecode(asf.Short[j]);
                var order = short.match(/\[\d\]/);

                // if the special code isn't there, then we just sort it in the order we got it
                if (order === null)
                    order =  j;
                else {
                    order = order[0].replace('[', '');
                    order = order.replace(']', '');
                }

                sorted.push({ Order: order, Feedback: ClearFeedbackShortcodes(short) });
            }
        }
    }

    sorted = sorted.sort(function(obj1, obj2) {
        return obj1.Order - obj2.Order;
    });

    for (i = 0; i < sorted.length; i++) {
        var s = sorted[i];

        if (s === null || s.Feedback === '' || s.Feedback == '<br/>' || s.Feedback == '<br>')
            continue;

        html += '<div class="shortFeedback">' + s.Feedback + '</div>';
    }

    html += '</div>';
    return html;
}

function RenderStrength(control){
    if (_motivationTool === null)
        return '';

    var html = "<div id='" + control.ID + "' class='control strengths'>";
    var strengths = _motivationTool.Strengths.split(',');

    for (var i = 0; i < strengths.length; i++) {
        var s = strengths[i].trim();
        html += '<div class="strength">' + s + '</div>';
    }

    html += "</div>";
    return html;
}

function RenderTextbox(control){
    var html = '<div id="' + control.ID + '" class="control textbox">';
    html += '<div class="prompt">' + control.Prompt + '</div>';
    html += '<input data-code="' + control.Code + '" type="textbox" placeholder="' + control.Placeholder + '" />';
    // if (control.IsRequired)
    //  html += '<span class="required">*</span>'

    html += '</div>';
    return html;
}

function RenderToolUsage(control) {
    var html = '<div id="' + control.ID + '" class="control toolusage">';

    if (control.ShortFeedback !== null) {
        var split = control.ShortFeedback.split('*||*');
        var good = split[0];
        var bad = split[1];

        if (_usedTools)
            html += Encoder.htmlDecode(good);
        else
            html += Encoder.htmlDecode(bad);
    }

    html += '</div>';

    return html;
}

function RenderVideo(control) {
    var html = '';
    html += '<div id="' + control.ID + '" class="control video">';
    html += '<div class="playControl"><img src="img/assets/iconPlay.png" /></div>';
    html += '<img src="' + control.Placeholder + '" />';
    html += '</div>';
    return html;
}

function SaveArticleAnswers(){
    var answers = ValidateAndLoadControls();
    if (answers == "error")
        return false;

    // store the answers globally...question is...have we stored this before?
    var found = false;
    for (var i = 0; i < _userAnswers.length; i++) {
        var ua = _userAnswers[i];
        if (ua.PageID == _currentMarvin.ID){
            found = true;
            ua.Answers = answers;
            break;
        }
    }

    if (!found){
        var a = { PageID: _currentMarvin.ID, Answers: answers };
        _userAnswers.push(a);
    }

    // if validation worked, then result will be an array of user answer objects
    SaveUserAnswers(answers);

    // branching anyone?
    if (_branchControlID !== null) {
        // we have a branch, which option did they choose?
        var a = GetAnswerByControl(answers, _branchControlID);

        // the answer is combined... pageID *||* text
        var array = a.Answer.split('*||*');
        var pageID = array[0];

        for (var i = 0; i < _branchOptions.length; i++) {
            var option = _branchOptions[i];
            if (option.ID == pageID) {
                // We know which option they chose, so this becomes our "next page"
                _nextMarvin = option;
                // we don't need the options anymore...
                _branchOptions = [];
                break;
            }
        }
    }

    return true;
}

function SavePick3Answers(){
    var answers = ValidateAndLoadControls();
    if (answers == "error")
        return false;

    var pick3Answers = ValidateAndLoadLinkedCheckboxes();
    if (pick3Answers == "error")
        return false;

    // since this is a mix of basically 2 pages (regular and pick 3), we need to combine the answers
    for (var i = 0; i < pick3Answers.length; i++) {
        var a = pick3Answers[i];
        answers.push(a);
    }


    // store the answers globally...question is...have we stored this before?
    var found = false;
    for (var i = 0; i < _userAnswers.length; i++) {
        var ua = _userAnswers[i];
        if (ua.PageID == _currentMarvin.ID){
            found = true;
            ua.Answers = answers;
            break;
        }
    };

    if (!found){
        var a = { PageID: _currentMarvin.ID, Answers: answers };
        _userAnswers.push(a);
    }

    SaveUserAnswers(answers);

    return true;
}

function SaveReport(html, type){
    html = Encoder.htmlEncode(html);

    $.ajax({
        url: config.Path + '/report/save',
        type: 'POST',
        data: { html: html, type: type, userID: _user.ID }
    }).done(function(data){
        if (data === null){
            HandleError('report/save returned null');
            return;
        }
    });
}

function SaveUserAnswers(answers){
    $.ajax({
        url: config.Path + '/marvin/saveanswers',
        data: JSON.stringify(answers),
        contentType: 'application/json; charset=utf-8',
        type: 'POST'
    }).done(function(data) {
        if (data === false){
            HandleError("SaveAnswers blew up...");
            return;
        }
    });
}

function SaveUserPlace(){
    console.log('Saving User Place: ' + _user.CurrentPageID);

    $.ajax({
        url: config.Path + "/user/savecurrentpage",
        data: JSON.stringify(_user),
        contentType: 'application/json; charset=utf-8',
        type: 'POST'
    });
}

function ShowGSTBranch(confidence){
    // which branch we show depends on the confidence level of the GST.
    ShowLoader();
    var pageID = null;

    if (confidence <= 2){
        pageID = _GSTPageControls.LowConfidencePageID;
    }
    else if (confidence <= 5)
        pageID = _GSTPageControls.MediumConfidencePageID;
    else
        pageID = _GSTPageControls.HighConfidencePageID;

    // all done with this...
    _GSTPageControls = null;

    $.ajax({
        url: config.Path + '/marvin/getpage',
        data: { pageID: pageID, userID: _user.ID }
    }).done(function(data){
        _nextMarvin = data;
        ShowNextPage();
    });
}

function ShowNextPage(){
    ShowLoader();
    _changedModules = false;
    
    // the 2 and 3 page will leap frog over each other as the user keeps clicking next
    // initially 2 is the current page & 3 is the next page, but once the user clicks next
    // 3 becomes the current and 2 becomes the next.
    if (_visiblePage == "2")
        _visiblePage = "3";
    else
        _visiblePage = "2";

    var divID = '#' + _visiblePage + 'Content';

    //by waseem for previous track
    if (_previousMarvinArray.length == 0)
        _previousMarvinArray.push(_currentMarvin);

    //update the cache for the next move
    _beforeMarvin = _prevMarvin;
    _prevMarvin = _currentMarvin;
    _currentMarvin = _nextMarvin;
    _nextMarvin = _afterMarvin;
    _afterMarvin = null;

    var ID = _currentMarvin.ID;
    _user.CurrentPageID = ID;

    //by waseem for previous track;
    _previousMarvinArray.push(_currentMarvin);

    LogInfo("Next: " + _currentMarvin.Name + ' [' + ID + ']');

    if (_nextMarvin == null){
        LogInfo('Next page unknown...disabling page');
        // we don't know where they are going next so they can't move again until we are done with the calls below.
        $('.marvinBottom').css('opacity', '.5');
        $('.btnNext').prop('disabled', true);
        _isMoving = true;
    }

    // some page types (usually embedded tools) take us out of the normal
    // marvin flow because they are multiple pages in and of themselves.
    // this means that we don't need to move between marvin pages right now...
    var outsideMarvinFlow = ProcessPageType(true, divID, _prevMarvin, _currentMarvin, _nextMarvin);
    
    if (_prevMarvin.ModuleID == _currentMarvin.ModuleID){
        // keeping track of what page we are on for progress purposes
        _pageOrder++;
    }
    else {
        // ooh we switched between modules. Cool.
        LogInfo('Started New Module: ' + _currentMarvin.ModuleID);
        _pageOrder = 0;

        LoadModuleInfo(_currentMarvin.ID, function(){});

        // we have already switched our globals...so we actually need to look at our previousMarvin
        if (_prevMarvin !== null){
            CompleteModule(_prevMarvin.ModuleID);
        }

        StartNewModuleSession();
        _changedModules = true;
    }

    if (!outsideMarvinFlow){
        LogInfo('Loading User Answers');
        // populate the page with answers!
        LoadUserAnswers(true, _currentMarvin, function(answers){
            LogInfo('User Answers Loaded');

            if (answers !== null){
                LogInfo('Populating Controls');
                PopulateControls(answers, divID);
                LogInfo('Controls Populated');
            }

            LogInfo('Moving Page');
            MovePage(true);
        });
    }

    if (_isWatsonArticle){
        LogInfo('Getting Next Watson Article Page');

        $.ajax({
            url: config.Path + '/watson/getnextpage',
            data: { pageID: ID }
        }).done(function(data){
            if (data === null)
                HandleError("Get next page returned null");
            else {
                _nextMarvin = data[0];
                _afterMarvin = data[1];
                _isMoving = false;
                $('.marvinBottom').css('opacity', '');

                ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin);
            }

            HideLoader();
        });
    }
    else {
        LogInfo('Getting Next Page');
        $.ajax({
            url: config.Path + '/marvin/getnextpage',
            data: { pageID: ID }
        }).done(function(data){
            LogInfo('Next Page Retrieved.');
            $('.btnNext').prop('disabled', false);

            SaveUserPlace();

            if (data === null)
                HandleError("Get next page returned null");
            else {
                _nextMarvin = data[0];
                _afterMarvin = data[1];
                _isMoving = false;
                $('.marvinBottom').css('opacity', '');

                ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin);
            }

            HideLoader();
        });
    }
}

function ShowPreviousPage(){
    _isMoving = true;
    $('.marvinBottom').css('opacity', '.5');

    // the 2 and 3 page will leap frog over each other as the user keeps clicking next
    // initially 2 is the current page & 3 is the next page, but once the user clicks next
    // 3 becomes the current and 2 becomes the next.
    if (_visiblePage == "2") {
        _prevPage = "2";
        _visiblePage = "3";
    }
    else {
        _prevPage = "3";
        _visiblePage = "2";
    }

    var divID = '#' + _visiblePage + 'Content';

    // keeping track of what page we are on for progress purposes
    _pageOrder--;

    // we have changed pages...update the cache for the next move
    _afterMarvin = _nextMarvin;
    _nextMarvin = _currentMarvin;
    _currentMarvin = _prevMarvin;
    _prevMarvin = _beforeMarvin;

    var ID = _currentMarvin.ID;

    //by waseem for previous marvin
    if (_previousMarvinArray.length > 0) {
        _currentMarvin = _previousMarvinArray[_previousMarvinArray.length - 2];
        var ID = _previousMarvinArray[_previousMarvinArray.length - 2].ID;
        _previousMarvinArray.pop(_previousMarvinArray.length - 2);
    }

    // they can't move on until we are done.
    $('.btnPrev').prop('disabled', true);

    ProcessPageType(false, divID, _prevMarvin, _currentMarvin, _afterMarvin);
    // populate the page with answers!
    LoadUserAnswers(false, _currentMarvin, function(answers){
        if (answers !== null)
            PopulateControls(answers, divID);

        MovePage(false);
    });

    LogInfo("Previous: " + _currentMarvin.Name + ' [' + ID + ']');

    $.ajax({
        url: config.Path + '/marvin/getpreviouspage',
        data: { pageID: ID }
    }).done(function(data){
        $('.btnPrev').prop('disabled', false);

        if (data === null)
            HandleError("Get previous page returned null");
        else {
            _prevMarvin = data[0];
            _beforeMarvin = data[1];
            _isMoving = false;

            ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin);
            $('.marvinBottom').css('opacity', '');
        }
    });
}

function StartWatsonArticle(pageID){
    ShowLoader();
    $('#2Content, #3Content').html('');

    if (_visiblePage == "2")
        _visiblePage = "3";
    else
        _visiblePage = "2";

    var divID = '#' + _visiblePage + 'Content';

    $.ajax({
        url: config.Path + '/watson/startinternalarticle',
        data: { pageID: pageID, userID: _user.ID },
        type: 'GET'
    }).done(function(data) {
        if (data === null) {
            HandleError();
            return;
        }

        _beforeMarvin = data[0];
        _prevMarvin = data[1];
        _currentMarvin = data[2];
        _nextMarvin = data[3];
        _afterMarvin = data[4];

        _isMoving = true;
        $('.marvinBottom').css('opacity', '.5');

        ProcessPageType(true, divID, _prevMarvin, _currentMarvin, _nextMarvin);

        // populate the page with answers!
        LoadUserAnswers(true, _currentMarvin, function(answers){
            if (answers !== null)
                PopulateControls(answers, divID);

            ManageNavButtons(_prevMarvin, _currentMarvin, _nextMarvin)
            MovePage(true);
            setTimeout(function(){
                _isMoving = false;
                $('.marvinBottom').css('opacity', '');
            }, 500);

            HideLoader();
        });
    });
}

function StartNewModuleSession(){
    $.ajax({
        url: config.Path + '/marvin/startnewmodulesession',
        data: JSON.stringify(_user),
        contentType: 'application/json; charset=utf-8',
        type: 'POST'
    }).done(function(data){
        if (data === false){
            HandleError("StartNewModuleSession returned false...");
            return;
        }
    });
}

function ValidateAndLoadControls() {
    var page = _currentMarvin;
    console.log('validating...' + page.Controls.length);

    var answers = [];
    var shortFeedback = [];
    var pick3Feedback = [];
    var eomFeedback = [];
    var longFeedback = [];
    var pageScore = 0;
    var feedbackColors = [];
    var feedbackImages = [];

    for (var i = 0; i < page.Controls.length; i++) {
        var control = page.Controls[i];
        var webControl = $('#' + control.ID);
        var msg = "";

        if (!CheckControlBuyer(control))
            continue;

        switch (control.Type){
            case 'assessment':
                var selected = ProcessDropDowns(webControl);
          
                if (control.IsRequired && selected.AnswerID == '')
                    msg = 'Please select an option.';
                else {
                    // page scoring...
                    var score = selected.Score;

                    if (score !== ""){
                        pageScore += score;
                        if (_currentMarvin.PageType.Name == "Practice Session"){
                            _practiceSessionScore += score;
                        }
                    }

                    var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: selected.Code, Answer: selected.Text, Score: score };
               
                    answers.push(answer);
                    var index = selected.Index;
                    shortFeedback.push(control.ShortFeedback.split('*||*')[index]);
                    feedbackColors.push(control.Action);

                    if (control.FeedbackImage !== null)
                        feedbackImages.push(control.FeedbackImage.split('*||*')[index]);
                }
                break;
            case 'branch':
                var selected = ProcessDropDowns(webControl);
                var index = selected.Index;
    
                if (selected.AnswerID == '')
                    msg = 'Please select an option.';
                else {
                    // good to go!
                    var score = selected.Score;
                    var s = null;
                    if (score !== null && score !== '')
                        s = score;

                    var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: selected.Code, Score: s, Answer: selected.Action };

                    answers.push(answer);
                }
                break;
            case 'checkbox':
                var checks = webControl.find('input');
                var txtList = webControl.find('.checkText');

                var isChecked = false;
                var checked = [];
                var codes = [];

                for (var j = 0; j < checks.length; j++) {
                    var check = $(checks[j]);
                    codes.push(check.data('code'));
                    if (check.is(':checked')){
                        isChecked = true;
                        checked.push(1);
                    }
                    else
                        checked.push(0);
                }

                if (control.IsRequired && !isChecked)
                    msg = 'Please select at least one option.';
                else {
                    // good to go!
                    var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: codes.join('*||*'), Answer: checked.join('*||*') };
                    answers.push(answer);
                }

                break;
            case 'dropdown':
                var selected = ProcessDropDowns(webControl);
               
              //  selected = selected.filter(function (v) { return v !== '' });
                if (control.IsRequired && selected.AnswerID == '')
                    msg = 'Please select an option.';
                else {
                    // good to go!
                    var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: selected.Code, Answer: selected.Text };
                    answers.push(answer);
                }

                break;
            case 'eom':
               
                var dropdowns = webControl.find('.dropDownList');

                // EOMs actually have more than one answer...so we combine them.
                var combinedAnswer = [];
                var codes = [];

                for (var j = 0; j < dropdowns.length; j++) {
                    var ddl = $(dropdowns[j]);
                    var selected = ProcessDropDowns(ddl);

                   // var selected = ddl.find('option:selected');
                    var index = selected.Index;

                    if (selected.AnswerID == '')
                        msg = 'Please select an option.';
                    else {
                        combinedAnswer.push(selected.Text);
                        codes.push(selected.Code);
                        var fb = control.ShortFeedback.split('*||*')[index];
                        eomFeedback.push(fb);
                    }
                }

                var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: codes.join('*||*'), Answer: combinedAnswer.join('*||*') };
                answers.push(answer);
                break;
            case 'textbox':
                var input = webControl.find('input');
                var txt = input.val();
                var code = input.data('code');
                if (control.IsRequired && txt === ""){
                    msg = 'This textbox is required.';
                }
                else if (control.IsNumeric && isNaN(txt)){
                    msg = "Please enter a number."
                }
                else {
                    // good to go!
                    var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: code, Answer: txt };
                    answers.push(answer);
                }

                break;
        }

        if (msg !== ""){
            webControl.focus();
            ShowError(msg);
            HideLoader();
            return "error";
        }
    }

    // page feedback anyone?
    if (page.Feedback !== null && page.Feedback.length > 0){
        var feedback = null;

        // we need to determine which feedback to give them.
        for (var i = 0; i < page.Feedback.length; i++) {
            var f = page.Feedback[i];
            if (f.Score > pageScore)
                break;

            feedback = f.Text;
        }

        // have we saved this before?
        var found = false;

        for (var i = 0; i < _pageFeedback.length; i++) {
            var pf = _pageFeedback[i];

            if (pf.PageID == page.ID){
                // we have saved this before! So we need to edit it.
                pf.Text = feedback;
                found = true;
                break;
            }
        }

        if (!found){
            var pf = { PageID: page.ID, Text: feedback, FeedbackPage: null };
            _pageFeedback.push(pf);
        }
    }

    if (eomFeedback.length > 0){
        // but first we need to see if we have already saved this feedback before...
        var found = false;

        for (var i = 0; i < _eomFeedback.length; i++) {
            var eomf = _eomFeedback[i];

            if (eomf.PageID == page.ID){
                // we have saved this before! So we need to edit it.
                eomf.Short = eomFeedback;
                found = true;
                break;
            }
        }

        if (!found){
            var eomf = { PageID: page.ID, Short: eomFeedback, FeedbackPage: null };
            _eomFeedback.push(eomf);
        }
    }

    // we only load up the short feedback global when we know there aren't any validation errors.
    if (shortFeedback.length > 0){
        // but first we need to see if we have already saved this feedback before...
        var found = false;

        for (var i = 0; i < _assessmentShortFeedback.length; i++) {
            var asf = _assessmentShortFeedback[i];

            if (asf.PageID == page.ID){
                // we have saved this before! So we need to edit it.
                asf.Short = shortFeedback;
                found = true;
                break;
            }
        }

        if (!found) {
            var asf = { PageID: page.ID, Short: shortFeedback, FeedbackPage: null, Color: feedbackColors, Image: feedbackImages };
            _assessmentShortFeedback.push(asf);
        }
    }

    return answers;
}

function ValidateAndLoadLinkedCheckboxes() {
 
    var answers = [];
    var pick3Feedback = [];
    var pageScore = 0;
    var page = _currentMarvin;
    var msg = "";
    var p3Text = [];
    var p3Stem = [];

    var links = $('.linkedCheckbox');
    var checked = [];

    for (var i = 0; i < links.length; i++) {
        var link = $(links[i]);
        var controlID = link.closest('.linkedCheckbox').attr('id');

        if (!link.find('input').is(':checked')) {
            //var answer = { UserID: _user.ID, PageID: page.ID, ControlID: controlID };
            //answers.push(answer);
        }
        else {
            checked.push(link);
           
            var control = GetControl(page.Controls, controlID);
            var selected = ProcessDropDowns(link);
            // var selected = link.find("input[type='hidden']");

            var index = selected.Index
            //var index = selected.index() - 1; // we subtract one, because we have an initial value in the dropdown
            //if (index < 0){
       //     selected = selected.filter(function (v) { return v !== '' });
            if (selected.AnswerID ==='') {
                msg = "All linked assessments need a value";

                link.focus();
                ShowError(msg);
                return "error";
            }

            p3Text.push(link.find('.checkText').text());
            p3Stem.push(control.Action);
            //  var answer = { UserID: _user.ID, PageID: page.ID, ControlID: control.ID, Code: ddl.data('code'), Answer: selected[1], Score: score };

            var answer = { UserID: _user.ID, PageID: page.ID, ControlID: controlID, Code: selected.Code, Answer: selected.Text, Stem: control.Action, Score: selected.Score };
            answers.push(answer);
            
            if (control.ShortFeedback !== null)
                pick3Feedback.push(control.ShortFeedback.split('*||*')[index]);
        }
    }

    if (checked.length == 0)
        msg = 'Please select at least one item.';
    else if (checked.length > 3) {
        msg = 'Please choose no more than three.';
    }

    if (msg !== "") {
        ShowError(msg);
        return "error";
    }

    // we only load up the pick 3 feedback global when we know there aren't any validation errors.
    if (pick3Feedback.length > 0) {
        // but first we need to see if we have already saved this feedback before...
        var found = false;

        for (var i = 0; i < _pick3Feedback.length; i++) {
            var p3f = _pick3Feedback[i];

            if (p3f.PageID == page.ID) {
                // we have saved this before! So we need to edit it.
                p3f.Short = pick3Feedback;
                found = true;
                break;
            }
        }

        if (!found) {
            var p3f = { PageID: page.ID, Short: pick3Feedback, FeedbackPage: null };
            _pick3Feedback.push(p3f);
        }
    }

    // we just changed the pick 3...lets load up the global _pick3Text
    _pick3Text = p3Text;
    _pick3stems = p3Stem;
    return answers;
}



