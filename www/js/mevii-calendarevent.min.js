var _calendarData = null; // this is used when we need to preload the calendar page with info
var _calendarEvents = [];
var _calendarEventTypes = [];
var _calendarPlugin = null;
var _calendarEventOriginal = null;
// WARNING: do not modify these values
var _calendarRecurrence = {
	DAILY: 'daily',
	WEEKLY: 'weekly',
	MONTHLY: 'monthly',
	YEARLY: 'yearly'
};
var _calendarPluginSuccess = function(message){
	// TODO: plugin success
};
var _calendarPluginError = function(message){
	HandleError('Calendar Plugin Error: ' + message);
};

function InitializeCalendarEvent(){
	_calendarPlugin = (window.plugins && window.plugins.calendar ? window.plugins.calendar : null);

	var recurrenceSelect = $('#calendarEventRecurrence');
	recurrenceSelect.append($('<option>').prop('value', '').text('None'));
	$.each(_calendarRecurrence, function (key, value) {
	    var text = ToTitleCase(value);
	    recurrenceSelect.append($('<option>').prop('value', value).text(text));
	});

	LoadCalendarEventTypes()
		.then()
		.done(function(){
			var calendarEventTypeID = $('#calendarEventTypeID');
			var calendarEventSearchType = $('#calendarEventSearchType');
			var emptyOption = $('<option>').prop('value', '');
			calendarEventTypeID.append(emptyOption.clone().text('Select one'));
			calendarEventSearchType.append(emptyOption.clone().text('Filter by Type'));
			$.each(_calendarEventTypes, function(index, value){
				var option = $('<option>').prop('value', value.ID).text(value.Name)
				calendarEventTypeID.append(option.clone());
				calendarEventSearchType.append(option.clone());
			});
		});

	$('.viewCalendarEventsBtn').on('click', function(){
		InitializeCalendarEventList('calendarEventsList', function(){
		    MovePageLeft('#pageCalendarEventView', _currentPage);
		});
    });
	$('.searchCalendarEventsBtn').on('click', function(){
        InitializeCalendarEventSearch();
		MovePageLeft('#pageCalendarEventSearch', _currentPage);
    });
	$('.createCalendarEventBtn').on('click', function(){
		_calendarReturn = _currentPage;
        _calendarEventOriginal = null;
        ClearCalendarEventForm();
		MovePageLeft('#pageCalendarEventCreate', _currentPage);
    });

    $('#calendarEventAllDay').on('change', function () {
        SetCalendarEventDateInputTypes();
    });
    $('#calendarEventSaveBtn').on('click', function () {
        if (!ValidateCalendarEventCreate())
            return;

        ShowLoader();
        var newCalendarEvent = CreateCalendarEventObject();
        SaveCalendarEvent(newCalendarEvent, _calendarEventOriginal)
			.then()
			.done(function (data) {
			    ShowSuccess('Calendar entry saved.');
			    ClearCalendarEventForm();
			    InitializeCalendarEventList('calendarEventsList', function () {

						  if (_calendarReturn == '#pageCalendarEventSearch')
						      SearchCalendarEvents();
						  if (data === null)
						      return null
						  if (_calendarReturn === '#pagePleasantHome') {
						      $('#pagePleasantHome li').find('input[data-status=this]').attr("data-eventid", data.ID);
						      var activityid = $('#pagePleasantHome li').find('input[data-status=this]').attr("data-id");
						      $('#pagePleasantHome li').find('input[data-status=this]').removeAttr("data-status");
						      AttachEventWithPleasentActivity(data.ID, activityid);
						  }
						  if (_calendarReturn === '#pageActivityAdd') {
						      $('#pageActivityAdd .row').find('#addActivityDate').attr('data-calendareventid', data.ID);
						      $('#pageActivityAdd .row').find('#addActivityDate').removeAttr('data-assigneventid');
						  }
						  if (_calendarReturn === '#pageGoalSettingHome') {
						      $('#pageGoalSettingHome .row').find('#goalDate').attr('data-calendareventid', data.ID);
						      $('#pageGoalSettingHome .row').find('#goalDate').removeAttr('data-assigneventid');
						  }
			        MovePageRight(_calendarReturn, _currentPage);
							
			    });
			})
			.always(function () {
			    HideLoader();
                _calendarEventOriginal = null;
			});
    });
	$('#calendarEventCancelBtn').on('click', function(){
		ClearCalendarEventForm();
		MovePageRight(_calendarReturn, _currentPage);
	});

	InitCalendarIconClicks();
}

function AttachEventWithPleasentActivity(eventid, activityid) {
    $.ajax({
        type: 'POST',
        url: config.Path + '/calendarevent/updateactivityeventId',
        data: { CalendarEventId: eventid,ID: activityid },
    })
 .done(function (data) {
     if (data === null || data === false) {
         HandleError("Pleasant Activity blew up...");
         return;
     } else {

         // alert(JSON.stringify(data));
         ShowSuccess('Pleasant activities saved.');
     }
			
 })
 .fail(function (jqXHR, textStatus, errorThrown) {
     console.log(errorThrown);
     HandleError('Get Calendar Events API Error: ' + errorThrown);
     return null;
 });
}

function InitializeCalendarEventList(containerID, callback){
	LoadCalendarEvents(_user.ID)
	.then()
	.done(function(){
		DisplayCalendarEvents(_calendarEvents, containerID);
		if (typeof callback != "undefined" && callback !== null)
			callback();
	});
}

function SaveCalendarEvent(newCalendarEvent, originalCalendarEvent){
    var isNew = (newCalendarEvent.ID === null);
	return $.ajax({
		type: 'POST',
		url: config.Path + '/calendarevent/save',
		contentType: 'application/json; charset=utf-8',
		data: JSON.stringify(newCalendarEvent)
	})
	.done(function(data){
		if (data){
			if (_calendarPlugin){
                if (!isNew && originalCalendarEvent !== null){
                    _calendarPlugin.deleteEvent(
					    originalCalendarEvent.Title,
					    originalCalendarEvent.Location,
					    originalCalendarEvent.Notes,
					    originalCalendarEvent.StartDate.clone().toDate(),
					    originalCalendarEvent.EndDate.clone().toDate(),
					    _calendarPluginSuccess, _calendarPluginError);
                }

				var options = _calendarPlugin.getCalendarOptions();
				options.firstReminderMinutes = 1440;
				options.secondReminderMinutes = 0;
                if (newCalendarEvent.Recurrence !== null){
                    options.recurrence = newCalendarEvent.Recurrence;
				    options.recurrenceEndDate = CalculateRecurrenceEndDate(newCalendarEvent.Recurrence, newCalendarEvent.StartDate);
                }

				_calendarPlugin.createEventWithOptions(
					newCalendarEvent.Title,
					newCalendarEvent.Location,
					newCalendarEvent.Notes,
					newCalendarEvent.StartDate.clone().toDate(),
					newCalendarEvent.EndDate.clone().toDate(),
					options, _calendarPluginSuccess, _calendarPluginError);
			}
		}
	})
	.fail(function(jqXHR, textStatus, errorThrown){
		HandleError('Save Calendar Event Error: ' + errorThrown);
	});
}

function CreateCalendarEventObject(){
    var calendarEventID = $("#calendarEventID").val();
	var startDate = moment($('#calendarEventStartDate').val());
	var endDate = moment($('#calendarEventEndDate').val());
	if ($('#calendarEventAllDay').is(':checked')){
        startDate.startOf('day');
        endDate.startOf('day');
        if (startDate.isSame(endDate))
            endDate.add(1, 'days');
    }
	var recurrenceVal = $('#calendarEventRecurrence').val();
	return {
        ID: (calendarEventID !== '' ? calendarEventID : null),
		UserID: _user.ID,
		CalendarEventTypeID: $('#calendarEventTypeID').val(),
		StartDate: startDate,
		EndDate: endDate,
		Title: $('#calendarEventTitle').val(),
		Location: $('#calendarEventLocation').val(),
		Notes: $('#calendarEventNotes').val(),
		Recurrence: (recurrenceVal !== '' ? recurrenceVal : null)
	};
}

function DeleteCalendarEvent(calendarEvent){
	return $.ajax({
		type: 'DELETE',
		url: config.Path + '/calendarevent/delete',
		contentType: 'application/json; charset=utf-8',
		data: JSON.stringify(calendarEvent)
	})
	.done(function(data){
		if (data){
			if (_calendarPlugin){
				_calendarPlugin.deleteEvent(
					calendarEvent.Title,
					calendarEvent.Location,
					calendarEvent.Notes,
					calendarEvent.StartDate.clone().toDate(),
					calendarEvent.EndDate.clone().toDate(),
					_calendarPluginSuccess, _calendarPluginError);
			}
		}
	})
	.fail(function(jqXHR, textStatus, errorThrown){
		HandleError('Delete Calendar Event API Error: ' + errorThrown);
	});
}

function PopulateCalendarEventForm(calendarEvent) {
    $('#calendarEventID').val(calendarEvent.ID);
    var inputValueFormat = '';
    if (calendarEvent.StartDate.hour() == 0 &&
        calendarEvent.StartDate.minute() == 0 &&
        calendarEvent.StartDate.second() == 0 &&
        calendarEvent.EndDate.hour() == 0 &&
        calendarEvent.EndDate.minute() == 0 &&
        calendarEvent.EndDate.second() == 0){
        $('#calendarEventAllDay').prop('checked', true).change();
        inputValueFormat = 'YYYY-MM-DD';
    }
    else{
        $('#calendarEventAllDay').prop('checked', false).change();
        inputValueFormat = 'YYYY-MM-DDTHH:mm:ss';
    }
    $('#calendarEventStartDate').val(calendarEvent.StartDate.format(inputValueFormat));
    $('#calendarEventEndDate').val(calendarEvent.EndDate.format(inputValueFormat));
	$('#calendarEventTitle').val(calendarEvent.Title);
	$('#calendarEventLocation').val(calendarEvent.Location);
	$('#calendarEventNotes').val(calendarEvent.Notes);
	$('#calendarEventTypeID').val(calendarEvent.CalendarEventTypeID);
	$('#calendarEventRecurrence').val(calendarEvent.Recurrence);
}

function DisplayCalendarEvents(calendarEvents, containerID){
	var listContainer = $('#' + containerID).html('');
	$.each(calendarEvents, function (index, value) {
	    var eventType = $.grep(_calendarEventTypes, function (calendarEventType, index) {
	        return calendarEventType.ID == value.CalendarEventTypeID;
	    }).shift();
	    var eventContainer = $('<div class="row calendarRow">').appendTo(listContainer);
	    var titleContainer = $('<div class="row calendarTitleRow">').appendTo(eventContainer);
	    var dateContainer = $('<div class="row">').appendTo(eventContainer);
	    $('<div class="calendarListTitle col-xs-8 font700">').html(value.Title).appendTo(titleContainer);
	    $('<div class="calendarListType col-xs-4">').html((eventType ? eventType.Name : '')).appendTo(titleContainer);
	    $('<div class="calendarListDate col-xs-8">').html(value.StartDate.format('L LT')).appendTo(dateContainer);
	    $('<a class="calendarListEdit col-xs-2">').html('Edit')
			.on('click', null, value, function (event) {
			    _calendarReturn = _currentPage;
			    _calendarEventOriginal = event.data;
			    PopulateCalendarEventForm(event.data);
			    MovePageLeft('#pageCalendarEventCreate', _currentPage);
			})
			.appendTo(dateContainer);
	    $('<a class="calendarListDelete col-xs-2">').html('Delete')
			.on('click', null, value, function (event) {
			    DeleteCalendarEvent(event.data)
					.then()
					.done(function () {
					    ShowSuccess("Calendar Event Deleted");
					    InitializeCalendarEventList(containerID, null);
					});
			})
			.appendTo(dateContainer);
	    //   $('<a>').html('Show in Native Calendar')
	    // .on('click', function () {
	    //     OpenNativeCalendar(value.StartDate.toDate());
	    // })
	    // .appendTo(dateContainer);
	});
}

function InitCalendarIconClicks(){
	$('.calendarInit').off();
	$('.calendarInit').on('click', function(){
	    _calendarReturn = _currentPage;
	    if (_calendarReturn === '#pageGoalSettingHome') {
	        $(_calendarReturn + ' .row input').each(function () {
	            $(this).removeAttr('data-assigneventid');
	        });
	        $(this).closest('.row').find('#addActivityDate').attr('data-assigneventid', 'true');
	    }
	    if (_calendarReturn === '#pageActivityAdd') {
	        $(_calendarReturn + ' .row input').each(function () {
	            $(this).removeAttr('data-assigneventid');
	        });	      
	        $(this).closest('.row').find('#addActivityDate').attr('data-assigneventid', 'fillup');
	    }
	    if (_calendarReturn === '#pagePleasantHome') {
	        $(_calendarReturn + ' li input').each(function () {
	            $(this).removeAttr('data-status');
	        });
	        $(this).closest('li').find('input[type=text]').attr("data-status", "this");
	    }
		PrepopulateEvent(this);
		MovePageLeft('#pageCalendarEventCreate', _currentPage);
	});
}

function InitializeCalendarEventSearch(){
	$('#calendarEventSearchText').val('');
	$('#calendarEventSearchDate').val('');
	$('#calendarEventSearchType').val('');
	$('#calendarEventSearchResults').html('');
	$('#submitCalendarEventSearchBtn').on('click', function(event){
		SearchCalendarEvents();
	});
}

function SearchCalendarEvents(){
	var searchText = $('#calendarEventSearchText').val();
	var searchDate = moment($('#calendarEventSearchDate').val());
	var searchType = $('#calendarEventSearchType').val();
	var filteredCalendarEvents = $.grep(_calendarEvents, function(calendarEvent, index){
		return (
			(!searchText || calendarEvent.Title.toUpperCase().indexOf(searchText.toUpperCase()) > -1) &&
			(!searchDate.isValid() || calendarEvent.StartDate.isSame(searchDate, 'day')) &&
			(!searchType || calendarEvent.CalendarEventTypeID == searchType)
		);
	});
	DisplayCalendarEvents(filteredCalendarEvents, 'calendarEventSearchResults');
}

function LoadCalendarEvents(userID){
    return $.ajax({
        type: 'GET',
        url: config.Path + '/calendarevent/get',
        data: { userID: userID }
    })
	.done(function (data) {
	    _calendarEvents = [];
	    if (data)
	        _calendarEvents = data;
	    $.each(_calendarEvents, function (index, value) {
	        value.StartDate = moment(value.StartDate).local();
	        value.EndDate = moment(value.EndDate).local();
	    });
	})
	.fail(function(jqXHR, textStatus, errorThrown) {
	    console.log(errorThrown);
	    HandleError('Get Calendar Events API Error: ' + errorThrown);
	});
}

function LoadCalendarEventTypes(){
	return $.ajax({
		type: 'GET',
		url: config.Path + '/calendarevent/getcalendareventtypes'
	})
	.done(function(data){
		if (data)
			_calendarEventTypes = data;
	});
}

function OpenNativeCalendar(openToDate){
	if (_calendarPlugin &&
		typeof _calendarPlugin.openCalendar === 'function'){
		// available in 4.2.8+ of calendar plugin: https://build.phonegap.com/plugins/857
		_calendarPlugin.openCalendar(openToDate);
	}
	else if (window.device &&
		window.device.platform == 'iOS'){
		var iosReferenceDate = new Date(2001, 0, 1, 0, 0, 0, 0);
		openToDate.setDate(openToDate.getDate() + 1);
		var seconds = (openToDate.getTime() - iosReferenceDate.getTime()) / 1000;
		window.location.href = 'calshow:' + seconds;
	}
	else{
		alert('Open calendar to ' + openToDate);
	}
}

function PrepopulateEvent(e){
	var id = $(e).prop('id');
	var dateID = null;
	var title = null

	if ($(e).hasClass('gstCalendar')){
		dateID = '#goalDate';
		title = $('#goalAchieveText').val();
		var id = $(e).closest('.row').find('#goalDate').attr('data-calendareventid');
		var _eventtoload = getEventByID(id);
	}
	else if ($(e).hasClass('gstAddActivityCalendar')){
		dateID = '#addActivityDate';
		title = $('#activityTitleText').val();
		var id = $(e).closest('.row').find('#addActivityDate').attr('data-calendareventid');
		if (id !== "undefined" && id !== "" && id !== null)
		    var _eventtoload = getEventByID(id);

	}
	else if ($(e).hasClass('gstEditActivityCalendar')){
		dateID = '#editActivityDate';
		title = $('#activityEditTitleText').val();
	}
	else if ($(e).hasClass('paSuggestionCalendar')){
		title = $(e).closest('.row').find('.pleasantSuggestions').val();
		if (title == "0")
			title = '';
	}
	else if ($(e).hasClass('paCustomCalendar')){
		title = $(e).closest('.pleasantSortLI').find('.pleasantTextBox').val();
		// code add by numan for event Prepopulation of pleasent activity
		var id = $(e).closest('.pleasantSortLI').find('.pleasantTextBox').data('eventid');
		if(id !=="undefined" && id !=="" && id !==null)
		var _eventtoload=getEventByID(id);
		
	}


	if (dateID !== null){
		var d = $(dateID).val();
		if (d !== '') {
			date = moment(d).format('YYYY-MM-DD');
			$('#calendarEventStartDate').val(date);
		}
	}

	if (title !== null)
		$('#calendarEventTitle').val(title);

}
function getEventByID(id, callback) {
    if (_calendarEvents.length > 0) {
        for (var i = 0; i < _calendarEvents.length; i++) {
            var u = _calendarEvents[i];
            if (u.ID == id)
                PopulateCalendarEventForm(u);
                
        }
    }
    else {
        $.ajax({
            type: 'GET',
            url: config.Path + '/calendarevent/get',
            data: { userID: _user.ID }
        })
 .done(function (data) {
     _calendarEvents = [];
     if (data)
         _calendarEvents = data;
     $.each(_calendarEvents, function (index, value) {
        	 value.StartDate = moment(value.StartDate).local();
        	 value.EndDate = moment(value.EndDate).local();
     });
     for (var i = 0; i < _calendarEvents.length; i++) {
         var u = _calendarEvents[i];
         if (u.ID == id)
             PopulateCalendarEventForm(u);
     }
 })
 .fail(function (jqXHR, textStatus, errorThrown) {
     console.log(errorThrown);
     HandleError('Get Calendar Events API Error: ' + errorThrown);
     return null;
 });
    }
}
function ClearCalendarEventForm(){
    $('#calendarEventID').val('');
    $('#calendarEventAllDay').prop('checked', false).change();
	$('#calendarEventStartDate').val('');
	$('#calendarEventEndDate').val('');
	$('#calendarEventTitle').val('');
	$('#calendarEventLocation').val('');
	$('#calendarEventNotes').val('');
	$('#calendarEventTypeID').val('');
	$('#calendarEventRecurrence').val('');
}

function SetCalendarEventDateInputTypes(){
    if ($('#calendarEventAllDay').is(':checked')) {
        $('#calendarEventStartDate').prop('type', 'date');
        $('#calendarEventEndDate').prop('type', 'date');
    }
    else {
        $('#calendarEventStartDate').prop('type', 'datetime-local');
        $('#calendarEventEndDate').prop('type', 'datetime-local');
    }
}

function ValidateCalendarEventCreate(){
    if ($('#calendarEventTitle').val() === ""){
        ShowError("Title cannot be blank.")
        return false;
    }
    if ($('#calendarEventStartDate').val() === ""){
        ShowError("Start Date cannot be blank.")
        return false;
    }
    if ($('#calendarEventEndDate').val() === ""){
        ShowError("End Date cannot be blank.")
        return false;
    }
    if ($('#calendarEventTypeID').val() === ""){
        ShowError("Event Type cannot be blank.")
        return false;
    }
    var startDate = moment($('#calendarEventStartDate').val());
	var endDate = moment($('#calendarEventEndDate').val());
    if (startDate.isAfter(endDate)){
        ShowError("End Date must be after Start Date.")
        return false;
    }

    return true;
}

function CalculateRecurrenceEndDate(recurrence, startDateMoment){
    switch (recurrence){
        case _calendarRecurrence.DAILY:
            return startDateMoment.clone().add(30, 'days').toDate();
        case _calendarRecurrence.WEEKLY:
            return startDateMoment.clone().add(4, 'weeks').toDate();
        case _calendarRecurrence.MONTHLY:
            return startDateMoment.clone().add(12, 'months').toDate();
        case _calendarRecurrence.YEARLY:
            return startDateMoment.clone().add(5, 'years').toDate();
        default:
            return null;
    }
}

function ToTitleCase(str){
    return str.replace(/\b\w+/g, function(s){
        return s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();
    });
}

