var _group1count = 0;
var _group2count = 0;
var _group3count = 0;
var _group4count = 0;
var _group5count = 0;

var _panelCounter = 1;
var _activityTitle = "";
var _activityResource = "";
var _activityPeople = "";
var _editATitle = "";
var _editAResource = "";
var _editAPeople = "";

var _isActive = false;
var _goalIDEditing = "";
var _toolID = "";
var _selectedPlanName = "";

function InitializeGoalSetting(){

    $('#goalsDashb').on('click', function(){
        _isActive = true;
        LoadGoals();
        ShowyClose('#pageGoals');
    });

    $('.createGoalBtn').on('click', function(){
        ResetGoalHomePage();
        $('.goalHomeHeader').html('Create a new goal')
        MovePageLeft('#pageGoalSettingHome', _currentPage);
    });

    $('#planGoalBtn').on('click', function(){
        if($('#goalAchieveText').val() === ""){
            ShowError('Goal cannot be blank.');
        } else {
            MovePageLeft('#pageGoalSettingPlan', _currentPage);
        }
    });

    $('#goalPlanCancelBtn').on('click', function(){
        MovePageRight('#pageGoalSettingHome', _currentPage);
    });

    $('#goalPlanSaveBtn').on('click', function(){
        SavePlan();
    });

    $('#btnCancelGoalSetting').on('click', function(){
        if (_isActive)
            MovePageRight('#pageGoals', _currentPage);
        else
            MovePageRight('#pageGoalSettingCompleted', _currentPage);
    })

    // $('#goalPlanEditBtn').on('click', function(){
    //     MovePageLeft('#pagePlans', _currentPage);
    // });

    $('#goalPlanEditBtn').on('click', function(){
        $('#plans3').html("");
        $('#plans2').html("");
        $('#plans1').html("");
        $('#plans0').html("");
        MovePageLeft('#pageGoalSettingPlan', _currentPage);
    });

    $('#addActivityBtn').on('click', function(){
        ClearActivityBoxes();
        MovePageLeft('#pageActivityAdd', _currentPage);
    });

    $('#activitySaveBtn').on('click', function(){
        var activityTitle = $('#activityTitleText').val();
        var activityResource = $('#activityResourceText').val();
        var activityPeople = $('#activityPeopleText').val();
        var activityDate = $('#addActivityDate').val();
        var calendereventid = $('#addActivityDate').data('calendareventid');
        if(activityTitle === ""){
            ShowError('Activity name cannot be blank.');
        } else {
            var panels = $('#activityAccordion .panel').length;
            CreateActivity(activityTitle, activityResource, activityPeople, activityDate, 'activity-collapse-' + panels,calendereventid);
        }

        $('.collapse').off();
        $('.collapse').on('show.bs.collapse', function(){
            var i = $(this).parent().find('i')
            i.toggleClass('fa-caret-left fa-caret-down');
        }).on('hide.bs.collapse', function(){
            var i = $(this).parent().find('i')
            i.toggleClass('fa-caret-down fa-caret-left');
        });
    });

    $('.activityCancelBtn').on('click', function(){
        ActivityEditCancel();
        MovePageRight('#pageGoalSettingHome', _currentPage);
    });

    // THIS BUTTON SENDS ALL THE GOAL DATA TO THE API!!!
    $('#goalSettingBtn').on('click', function(){
        SaveGoal();
    });

    $('.viewActiveGoalsBtn').on('click', function(){
        _isActive = true;
        LoadGoals();
        MovePageRight('#pageGoals', _currentPage);
    });

    $('.viewCompletedGoalsBtn').on('click', function(){
        _isActive = false;
        LoadGoals();
        MovePageLeft('#pageGoalSettingCompleted', _currentPage);
    });

    $('#btnPlanGoBack').on('click', function(){
        MovePageRight('#pageGoalSettingPlan', _currentPage);
    });
}

function ActivityEditCancel(){
    $('#activityEditTitleText').val('');
    $('#activityEditResourceText').val('');
    $('#activityEditPeopleText').val('');
    $('#editActivityDate').val('');
}

function AddPlan(e){
    var plantext = $(e).closest('button').html();
    _selectedPlanName = plantext;

    $('#planSelected').html(plantext);
    $('#planSelected, #planSelectedHeader, #activityHeader, #addActivityBtn').removeClass('displayNone');
    $('#planGoalBtn').addClass('displayNone');
    $('#planSelectedHeader, #goalPlanEditBtn').removeClass('displayNone');

    MovePageRight("#pageGoalSettingHome", _currentPage);
}

function BuildGoalRows(data, type){
    var html = '';

    if (data.length == 0){
        $('.' + type + 'GoalHeader').hide();
        html += '<p>You currently do not have any ' + type + ' goals.</p>'
    }
    else {
        $('.' + type + 'GoalHeader').show();
    }

    for(var i=0; i<data.length; i++){
        var tool = data[i];
        var plan = GetSelectedPlan(tool);
        if(plan==null){ plan = "None"; }
        var date = moment(tool.FinishDate).format("MM/DD/YYYY"); //formatting for 'show'
        if(plan.Name == undefined){ plan.Name = "None"; }

        html += '<div class="goalRow" id="' + tool.ID + '">';
        html += '<div class="toolName">' + tool.Name + '</div>';
        html += '<div class="row"><div class="col-xs-12"><span class="emphasis">Plan:</span>';
        html += '<span class="red planName">' + plan.Name + '</span>';
        html += '</div></div>';
        html += '<div class="row smallRow"><div class="col-xs-5">'
        html += '<div class="toolDate">' + date + '</div></div>';
        html += '<div class="col-xs-5">Confidence: ' + tool.ConfidenceLevel + '</div>';
        html += '<div class="col-xs-2"><span class="editGoal">Edit</span></div>';
        html += '</div></div>';
    }

    $('#' + type + 'GoalsList').html(html);

    $('.editGoal').off();
    $('.editGoal').on('click', function(){
        $('.goalHomeHeader').html('Update your goal')

        _goalIDEditing = $(this).closest('.goalRow').attr('id');
        EditGoal(data);
        MovePageLeft('#pageGoalSettingHome', _currentPage);
    });
}

function CheckedCount(groupNumber, groupCount){
    var i=0;
    groupCount = 0;
    for(i=0; i<groupNumber.length; i++){
        if($(groupNumber[i]).prop('checked')){
            groupCount++;
        }
    }
    return groupCount;
}

function ClearActivityBoxes(){
    $('#activityTitleText').val("");
    $('#activityResourceText').val("");
    $('#activityPeopleText').val("");
}

function CreateActivity(title, resource, people, date, id,claendereventid) {
    if(title === ""){
        $('#activityTitleText').focus();
        ShowError("Activity name cannot be blank.");
    } else {
        var accordion = $('#activityTemplate').html();
        accordion = accordion.replace('%%ACCORDION%%', id);

        $('#activityAccordion').append(accordion);

        var panel = $('#activityAccordion .panel:last-child');
        panel.find('.panel-collapse').attr('id', id);

        title = '<span class="activityTitle">' + title + '</span>';
        var icon = '<i class="iconAccordion fa fa-caret-left"></i>';
        panel.find('.activityTitleWrapper').html(title + icon);
        panel.find('.activityResource').html(resource);
        panel.find('.activityPeople').html(people);

        var pDate = panel.find('.activityDate');
        if(claendereventid !==null && claendereventid !=='')
            pDate.attr('data-calendareventid', claendereventid);
        else
            pDate.attr('data-calendareventid', '');
        pDate.attr('data-calendareventid');
        if (date !== null && date !== ''){
            pDate.html(moment(date).format('MM/DD/YYYY'));
            panel.find('.activityDateWrapper').show();
        }
        else {
            pDate.html('');
            panel.find('.activityDateWrapper').hide();
        }

        $('.activityEditBtn').off();

        $('.activityEditBtn').on('click', function(){
            EditActivity(this);
        });
        if(_currentPage == '#pageActivityEdit' || _currentPage == '#pageActivityAdd'){
            $('#activityAccordion, #goalSettingBtn, .rowWhen, .rowReward, .rowConfidence').removeClass('displayNone');
            MovePageLeft('#pageGoalSettingHome', _currentPage);
        }
    }
}

function EditActivity(e){
    var activity = $(e).closest('.panel');

    var title = activity.find('.activityTitle');
    var titleText = $(title).html();
    $('#activityEditTitleText').val(titleText);

    var resource = activity.find('.activityResource');
    var resourceText = $(resource).html();
    $('#activityEditResourceText').val(resourceText);

    var people = activity.find('.activityPeople');
    var peopleText = $(people).html();
    $('#activityEditPeopleText').val(peopleText);

    var date = activity.find('.activityDate');
    var dateText = $(date).html();
    if (dateText !== ''){
        dateText = moment(dateText).format('YYYY-MM-DD')
        $('#editActivityDate').val(dateText);
    }

    MovePageLeft('#pageActivityEdit', _currentPage);

    $('#activityEditSaveBtn').off();

    $('#activityEditSaveBtn').on('click', function(){
        var newTitle = $('#activityEditTitleText').val();
        var newResource = $('#activityEditResourceText').val();
        var newPeople = $('#activityEditPeopleText').val();
        var newWhen = $('#editActivityDate').val();

        $(title).html(newTitle);
        $(resource).html(newResource);
        $(people).html(newPeople);

        if (newWhen !== ''){
            $(date).html(moment(newWhen).format('MM/DD/YYYY'));
            activity.find('.activityDateWrapper').show();
        }
        else{
            $(date).html('');
            activity.find('.activityDateWrapper').hide();
        }


        MovePageLeft('#pageGoalSettingHome', _currentPage);
        ActivityEditCancel(); //clear the form once saved; otherwise, values stick around :/
    });
}

function EditGoal(data){
    ResetGoalHomePage();

    // wake it up!
    $('#planSelectedHeader, #planSelected, #goalPlanEditBtn, #goalPlanEditBtn, #activityHeader, #activityAccordion, #addActivityBtn, .rowWhen, .rowReward, .rowConfidence, #goalSettingBtn').removeClass('displayNone');
    $('#planGoalBtn').addClass('displayNone');

    //first, find the goal by the ID with this loop
    var i = 0;
    var selectedTool = null;
    for(i=0; i < data.length; i++){
        if(data[i].ID == _goalIDEditing){
            selectedTool = data[i];
            _toolID = selectedTool.ID;
            break;
        }
    }

    //now we can set all of the attributes back on the Goal Home page with the old data
    $('#goalAchieveText').val(selectedTool.Name); //the goal name
    // alert(selectedTool.Plans[0].Name) this works - gets the first plan's name
    // alert(selectedTool.Name);

    $('#goalReward').val(selectedTool.Reward);
    $('#goalConfidence').val(selectedTool.ConfidenceLevel).attr('selected', 'selected');
    $('#goalDate').val(moment(selectedTool.FinishDate).format("YYYY-MM-DD"));
    $('#goalDate').attr('data-calendareventid', selectedTool.CalendarEventID);
    // $('#planSelectedText').html(selectedTool.plans[selectedTool.selectedPlanOrder].Name);

    var selectedPlan = GetSelectedPlan(selectedTool);
    if (selectedPlan !== null) {
         _selectedPlanName = selectedPlan.Name;
        $('#planSelected').html(_selectedPlanName);
        $('#planSelectedHeader').removeClass('displayNone');
    }

    var x = 0;
    for(x=0; x<selectedTool.Activities.length; x++){

        var activityTitle = selectedTool.Activities[x].Name;
        var activityResource = selectedTool.Activities[x].Resources;
        var activityPeople = selectedTool.Activities[x].People;
        var activityDate = selectedTool.Activities[x].CompleteDate;
        var calendareventid = selectedTool.Activities[x].CalendarEventID;
        var panels = x;
        // var panels = $('#activityAccordion .panel').length;

        CreateActivity(activityTitle, activityResource, activityPeople, activityDate, 'activity-collapse-' + panels, calendareventid);
    }

    PopulatePlans(selectedTool);
}

function GetSelectedPlan(goal){
    var plans = goal.Plans
    for (var i = 0; i < plans.length; i++) {
        var p = plans[i];
        if (p.ID == goal.SelectedPlanID)
            return p;
    }

    return null;
}

function LoadGoals(){
    ShowLoader();

    $.ajax({
        type: "GET",
        url: config.Path + '/goalsetting/gettools',
        data: { isActive: _isActive, userID: _user.ID }
    }).done(function(data){
        // console.log(JSON.stringify(data));
        $('#activeGoalsList').html('');
        $('#completedGoalList').html('');

        if (_isActive)
            BuildGoalRows(data, 'active');
        else
            BuildGoalRows(data, 'completed');

        HideLoader();
    });
}

function GatherActivityData(){
    var panelsLength = $('#activityAccordion .panel-title').length;
    // alert(panels);
    var i = 0;
    var x = 0;
    var panelID = '';
    var ID = ''
    var activitiesIDs = [];
    var title = "";
    var closesth4 = "";
    var allActivities = [];
    //gather all activity ID's into an array called activities:
    for(i = 0; i<panelsLength; i++){
        panelID = '#activity-collapse-' + i;
        activitiesIDs.push(panelID)
    }
 
    for(x = 0; x<activitiesIDs.length; x++){

        ID = activitiesIDs[x];
        var select = $(ID);
        var eachTitle = select.prev().find('.activityTitle').html();
        var eachResource = select.find('.activityResource').html();
        var eachPeople = select.find('.activityPeople').html();
        var eachDate = select.find('.activityDate').html();
        var calenderEventID = select.find('.activityDate').data('calendareventid');
        var eachActivity = { name: eachTitle, people: eachPeople, resources: eachResource, completedate: eachDate, CalendarEventID: calenderEventID }
        allActivities.push(eachActivity);
    }
    // alert(JSON.stringify(allActivities));
    return allActivities
}

function GatherGoalData(){

    var name = $('#goalAchieveText').val();
    var finishdate = $('#goalDate').val();
    var goalclalendarevent = $('#goalDate').data('calendareventid');

    if(name === ""){
        ShowError("Goal name cannot be blank.");
        $('#goalAchieveText').focus();
        return false;
    }

    if (finishdate === ""){
        ShowError("Please enter when the goal will be complete.");
        $('#goalDate').focus();
        return false;
    }

    var reward = $('#goalReward').val();
    var selected = $('#planSelectedText').html();
    var confidencelevel = $('#goalConfidence option:selected').val();

    var check1 = $('#check1').prop('checked');
    var check2 = $('#check2').prop('checked');
    var check3 = $('#check3').prop('checked');
    var check4 = $('#check4').prop('checked');
    var check5 = $('#check5').prop('checked');
    var check6 = $('#check6').prop('checked');
    var check7 = $('#check7').prop('checked');
    var check8 = $('#check8').prop('checked');
    var check9 = $('#check9').prop('checked');
    var check10 = $('#check10').prop('checked');
    var check11 = $('#check11').prop('checked');
    var check12 = $('#check12').prop('checked');
    var check13 = $('#check13').prop('checked');
    var check14 = $('#check14').prop('checked');
    var check15 = $('#check15').prop('checked');

    var plan1 = $('#plan1').val();
    var plan2 = $('#plan2').val();
    var plan3 = $('#plan3').val();
    var plan4 = $('#plan4').val();

    var allPlans = [plan1, plan2, plan3, plan4];
    var savePlans = [];

    for(var i = 0; i < 4; i++){
        if(allPlans[i] !== ""){
            savePlans.push(allPlans[i]);
        }
    }

    var planList = [];
    // If a plan isn't blank, push it into the newPlan object along with corresponding checkboxes
    for(x = 0; x < savePlans.length; x++){
        var newPlan;

        if(savePlans[x] == plan1){
            newPlan = { name: plan1, isPractical: check1, hasSupport: check2, isEasy: check3, order: x }
        } else if(savePlans[x] == plan2){
            newPlan = { name: plan2, isPractical: check4, hasSupport: check5, isEasy: check6, order: x }
        } else if(savePlans[x] == plan3){
            newPlan = { name: plan3, isPractical: check7, hasSupport: check8, isEasy: check9, order: x }
        } else if(savePlans[x] == plan4){
            newPlan = { name: plan4, isPractical: check10, hasSupport: check11, isEasy: check12, order: x }
        }

        //ORDER is the order in which the plan was entered by the user -starts counting w/ zero, so 0 is 1st.
        planList.push(newPlan);
    }

    var isSelectedPlan = null;

    for(var y = 0; y < savePlans.length; y++){
        if(savePlans[y] == _selectedPlanName){
            isSelectedPlan = y;
        }
    }

    var selectedPlanID = isSelectedPlan; //plan selected returns the NAME of the plan that the user selected
    var activities = GatherActivityData();
   
    var tool = {
            ID: _toolID,
            userid: _user.ID,
            name: name,
            reward: reward,
            confidencelevel: confidencelevel,
            finishdate: finishdate,
            CalendarEventID:goalclalendarevent,
            plans: planList,
            activities: activities,
            selectedPlanOrder: selectedPlanID }

    return tool;
}

function PopulatePlans(selectedTool) {
    // alert(JSON.stringify(selectedTool));
    if(selectedTool.Plans==[]){return;}
    if(selectedTool.SelectedPlan === null){return;}

    $('#plan1').val(selectedTool.Plans[0].Name);
    $('#check1').prop('checked', selectedTool.Plans[0].IsPractical);
    $('#check2').prop('checked', selectedTool.Plans[0].HasSupport);
    $('#check3').prop('checked', selectedTool.Plans[0].IsEasy);

    if (selectedTool.Plans.length > 1) {
        $('#plan2').val(selectedTool.Plans[1].Name);
        $('#check4').prop('checked', selectedTool.Plans[1].IsPractical);
        $('#check5').prop('checked', selectedTool.Plans[1].HasSupport);
        $('#check6').prop('checked', selectedTool.Plans[1].IsEasy);
    }

    if (selectedTool.Plans.length > 2) {
        $('#plan3').val(selectedTool.Plans[2].Name);
        $('#check7').prop('checked', selectedTool.Plans[2].IsPractical);
        $('#check8').prop('checked', selectedTool.Plans[2].HasSupport);
        $('#check9').prop('checked', selectedTool.Plans[2].IsEasy);
    }

    if (selectedTool.Plans.length > 3) {
        $('#plan4').val(selectedTool.Plans[3].Name);
        $('#check10').prop('checked', selectedTool.Plans[3].IsPractical);
        $('#check11').prop('checked', selectedTool.Plans[3].HasSupport);
        $('#check12').prop('checked', selectedTool.Plans[3].IsEasy);
    }
}

function ReorderGoalSetting(groupCount, plan){

    if(groupCount == 3){
        $('#plans3').append("<button class='plans checked3'>" + plan + "</button>");
    } else if(groupCount == 2) {
        $('#plans2').append("<button class='plans checked2'>" + plan + "</button>");
    } else if (groupCount == 1){
        $('#plans1').append("<button class='plans checked1'>" + plan + "</button>");
    } else {
        $('#plans0').append("<button class='plans checked0'>" + plan + "</button>");
    };

    $('button.plans').off();

    $('button.plans').on('click', function(){
        AddPlan(this);
    });
}

function ResetGoalHomePage(){
    // this means that we are in a module rather than starting from the dashboard
    if (_isEmbeddedGST)
        $("#btnCancelGoalSetting").hide();
    else
        $("#btnCancelGoalSetting").show();

    // ************************ RESET *********************************
    $('#goalAchieveText').val("");

    $('#plan1').val("");
    $('#check1').prop('checked', false);
    $('#check2').prop('checked', false);
    $('#check3').prop('checked', false);

    $('#plan2').val("");
    $('#check4').prop('checked', false);
    $('#check5').prop('checked', false);
    $('#check6').prop('checked', false);

    $('#plan3').val("");
    $('#check7').prop('checked', false);
    $('#check8').prop('checked', false);
    $('#check9').prop('checked', false);

    $('#plan4').val("");
    $('#check10').prop('checked', false);
    $('#check11').prop('checked', false);
    $('#check12').prop('checked', false);

    $('#plan5').val("");
    $('#check13').prop('checked', false);
    $('#check14').prop('checked', false);
    $('#check15').prop('checked', false);

    $('#activityAccordion').html("");
    $('#goalReward').val("");
    $('#goalConfidence').val(1).attr('selected', 'selected');

    $('#planSelectedHeader, #planSelected, #goalPlanEditBtn, #goalPlanEditBtn, #activityHeader, #activityAccordion, #addActivityBtn, .rowWhen, .rowReward, .rowConfidence, #goalSettingBtn').addClass('displayNone');
    $('#planGoalBtn').removeClass('displayNone');

    $('#plans0').html("");
    $('#plans1').html("");
    $('#plans2').html("");
    $('#plans3').html("");
}

function SaveGoal() {
    var tool = GatherGoalData();
    if (tool === false) // bad validation
        return;

    //$('#goalSettingBtn').prop('disabled', true);
	$('#goalSettingBtn').attr('disabled','disabled');
	
    ShowLoader();

    $.ajax({
        type: "POST",
        url: config.Path + '/goalsetting/savetool',
        data: tool
    }).done(function(data){
        HideLoader();
        //$('#goalSettingBtn').prop('disabled', false);
        if (data === null){
            HandleError('goalsetting/savetool returned null');
            return;
        }

        if (_isEmbeddedGST){
            // move on with the module...
            _isEmbeddedGST = false;
            ShowGSTBranch(tool.confidencelevel);
            HideLoader();
        }
        else {
            ShowSuccess("Your goal has been saved");
            _isActive = true;
            LoadGoals();
            MovePageRight('#pageGoals', _currentPage, function(){
                ResetGoalHomePage();
                ShowSuccess('Your goal was successfully saved!');
            });
        }
    }).fail(function (jqXHR, textStatus, errorThrown) {
    	
	  }).always(function (dataOrjqXHR, textStatus, jqXHRorErrorThrown) { 
	  
	  $('#goalSettingBtn').removeAttr('disabled'); 
	});
}

function SavePlan() {
    var group1 = ['#check1', '#check2', '#check3'];
    var group2 = ['#check4', '#check5', '#check6'];
    var group3 = ['#check7', '#check8', '#check9'];
    var group4 = ['#check10', '#check11', '#check12'];
    var group5 = ['#check13', '#check14', '#check15'];

    _group1count = CheckedCount(group1, _group1count);
    _group2count = CheckedCount(group2, _group2count);
    _group3count = CheckedCount(group3, _group3count);
    _group4count = CheckedCount(group4, _group4count);

    var plan1 = $('#plan1').val();
    var plan2 = $('#plan2').val();
    var plan3 = $('#plan3').val();
    var plan4 = $('#plan4').val();

    if(plan1 === "" && plan2 === "" && plan3 === "" && plan4 === ""){
        $('#plan1').focus();
        ShowError("Please enter at least one plan name.")
    }
    else {
        $('#plans0').html('');
        $('#plans1').html('');
        $('#plans2').html('');
        $('#plans3').html('');

        if(plan1 !== ""){
            ReorderGoalSetting(_group1count, plan1);
        }
        if(plan2 !== ""){
            ReorderGoalSetting(_group2count, plan2);
        }
        if(plan3 !== ""){
            ReorderGoalSetting(_group3count, plan3);
        }
        if(plan4 !== ""){
            ReorderGoalSetting(_group4count, plan4);
        }

        MovePageLeft('#pagePlans', _currentPage);
    }
}

