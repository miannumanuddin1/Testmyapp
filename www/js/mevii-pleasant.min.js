function InitializePleasant(){
	$('#pleasantDashb').on('click', function(){
		LoadPleasantActivities(function(){
			ShowyClose('#pagePleasantHome');
		});
	});

	$('#pleasantAddBtn').on('click', function(){
		AddPleasantTextBox();
	});

	$('#paInfoPopupIcon').on('click', function () {
	 
		MovePageUp('#pagePleasantPopUp', '#pagePleasantHome');
		// BuildPopUpHTML('pleasant');

		$('.pleasantPopUpFinished').on('click', function(){
			MovePageDown('#pagePleasantHome', '#pagePleasantPopUp');
		});
	});
	//
	// $('.deleteSuggestions').on('click', function(){
	// 	RemoveSuggestion(this);
	// });
	//
	// $('.deletePleasantTextBoxes').on('click', function(){
	// 	RemoveCustom(this);
	// });

	$( "#sortable" ).sortable({
		handle: '.paHandle',
		placeholder: 'sortPlaceholder'
	});
	$( "#sortable" ).disableSelection();

	$('#pleasantDoneBtn').off();
	$('#pleasantDoneBtn').on('click', function(){
		// CheckPleasantTextBoxes();
		SavePA();
	});

	$('#pleasantCloseBtn').on('click', function(){
		if (_isEmbeddedPA){
			_isEmbeddedPA = false;
			ShowNextPage(); // in contentengine...
		}
		else{
			ShowHomePage();
		}
	});

}

// function AddPleasantDropDown(){
// 	// do we need to add one?
// 	var list = $('.pleasantSuggestions');
// 	for (var i = 0; i < list.length; i++) {
// 		var ddl = $(list[i]);
//
// 		if (ddl.val() == '0')
// 			return; // nope!
// 	}
//
// 	var html = BuildPADropdownHtml();
//
// 	$('#pleasantDropBoxes').append(html);
// 	InitCalendarIconClicks(); // in calendarevent...
//
// 	$('.pleasantSuggestions').off();
// 	$('.pleasantSuggestions').change(function(){
// 		AddPleasantDropDown();
// 	});
//
// 	$('.deleteSuggestions').off();
// 	$('.deleteSuggestions').on('click', function(){
// 		RemoveSuggestion(this);
// 	});
// }

function AddPleasantTextBox(){

	var html = BuildPATextboxHtml();
	$('#sortable').append(html);

	$('.deletePleasantTextBoxes').off();
	$('.deletePleasantTextBoxes').on('click', function(){
		RemoveCustom(this);
	});

	var newest = $('.pleasantTextBox').last();
	return newest;
}

function BuildPADropdownHtml(){
	var html = '<div class="row rightRow"><div class="col-xs-12"><div class="title font300"></div>';
	html += '<select class="form-control pleasantSuggestions">';
	html += '<option value="0">Select One</option>';
	html += '<option value="Play an instrument">Play an instrument</option>';
	html += '<option value="Soak in bathtub">Soak in bathtub</option>';
	html += '<option value="Listen to music">Listen to music </option>';
	html += '<option value="Garden">Garden </option>';
	html += '<option value="Go to the library">Go to the library</option>';
	html += '<option value="Card or board games">Card or board games</option>';
	html += '<option value="Go to park">Go to park</option>';
	html += '<option value="Watch a movie">Watch a movie</option>';
	html += '<option value="Start an art project">Start an art project</option>';
	html += '<option value="Take a walk">Take a walk </option></select></div>';
	html += '<div class="col-xs-2">';
	html += '<div class="deleteSuggestions">Delete</div></div>';
	// html += '<div class="col-xs-2 col-xs-offset-8"><div class="right"><div class="calendarIcon calendarInit paSuggestionCalendar"></div></div>';
	html += '</div>';

	return html;
}

function BuildPATextboxHtml(item,eventid,plesentactivityid){
	var html = '<li class="pleasantSortLI clearBoth">';
	html += '<div class="row rightRow">';
	html += '<div class="col-xs-8"><input type="text" placeholder="Add a pleasant activity" class="pleasantTextBox" value="';

	if (typeof item != "undefined" && item !== null)
		html += item;

	html += '" data-id="';
	if (typeof plesentactivityid != "undefined" && plesentactivityid !== null)
	    html += plesentactivityid;

        
	html += '" data-eventid="';
	if (typeof eventid != "undefined" && eventid !== null)
	    html += eventid;
    html +='"></div>';
	html += '<div class="col-xs-4"><div class="right">';
	html += '<div class="calendarInit paCustomCalendar calendarIcon" data-eventid="'+eventid+'"></div>';
	html += '<img class="paHandle" src="img/assets/iconHamburger-grey.png" /></div></div>';
	html += '</div>';

	html += '<div class="row rightRow"><div class="col-xs-2"><div class="deletePleasantTextBoxes">Delete</div></div>';
	html += '<div class="col-xs-2 col-xs-offset-6"><div class="right"></div></div>';
	html += '</div></li>';

	return html;
}

function GatherPleasantDropDowns(groupID){
	var text = "";
	var tool = {};
	var toolArray = [];

	$('.pleasantSuggestions').find('option').each(function(){
		if($(this).is(':selected')){
			var text = $(this).val();
			if(text != "0"){
				tool = { UserID: _user.ID, Name: text, GroupID: groupID };
				toolArray.push(tool);
			}
		}
	});

	return toolArray;
}

function GatherPleasantTextBoxes(groupID){
	var i = 0;
	var text = "";
	var tool = {};
	var toolArray = [];

	$('.pleasantTextGroup').find('input').each(function(){
		text = $(this).val();
		if(text !== "" && text !="Add a pleasant activity"){
			var tool = {};
			tool = { UserID: _user.ID, Name: text, GroupID: groupID, Order: i };
			toolArray.push(tool);
			i++;
		}
	});

	return toolArray;
}

	// $.ajax({
 //        type: "POST",
 //        url: config.Path + '/pleasantactivity/savetool',
 //        data: { '': _toolArray }
 //    }).done(function(data){
 //    	MovePageRight('#2Page', _currentPage);
 //    	_toolArray = [];
	// 	_guid = "";
 //    });
 //    ShowSuccess('Pleasant activities saved.');
	// AddPleasantDropDown();

function LoadPleasantActivities(callback){
	ShowLoader();
	
	$.ajax({
        type: "GET",
        url: config.Path + '/pleasantactivity/gettool',
        data: { UserID: _user.ID }
    }).done(function(data){

    	_pleasantFromDB = data;
    	// alert(JSON.stringify(data));
    	if(data === null){
    		HandleError("Pleasant Activity GetTool returned null...")
			return;
    	}

        var i = 0;
        var length = data.length;
        if(length != 0){
        	$('#sortable').html(""); //If you GET any PA's from the DB, remove the blank text box from the PA Tool page.
        	$('#pleasantDropBoxes').html(""); // same for dropboxes

			var html = BuildPADropdownHtml();

			$('#pleasantDropBoxes').append(html);

			if ($('.pleasantSuggestions').length == 1)
				$('.deleteSuggestions').hide();
			else
				$('.deleteSuggestions').show();


			$('.pleasantSuggestions').off();
			$('.pleasantSuggestions').change(function(){
				var suggestion = $(this).val();
				if (suggestion == '0')
					return;

				var newest = AddPleasantTextBox();
				newest.val(suggestion);
				$(this).val('0');
			});
			//
			// $('.deleteSuggestions').off();
			// $('.deleteSuggestions').on('click', function(){
			// 	RemoveSuggestion(this);
			// });
        }

        for(i=0; i<length; i++){
            var html = BuildPATextboxHtml(data[i]['Name'], data[i]['CalendarEventID'], data[i]['ID']);
		    $('#sortable').append(html);
        }

        $('.deletePleasantTextBoxes').off();
		$('.deletePleasantTextBoxes').on('click', function(){
			RemoveCustom(this);
		});

		InitCalendarIconClicks(); // in calendarevent...

		HideLoader();
		if (typeof callback != "undefined" && callback !== null)
			callback();
    });
}

function RemoveSuggestion(e){
	if ($('.pleasantSuggestions').length == 1)
		return;

	$(e).closest('.row').remove();
}

function RemoveCustom(e){
	if ($('.pleasantSortLI').length == 1)
		return;

	$(e).closest('li').remove();
}

function SavePA(){
	var groupID = CreateGuid();

	var toolArray = GatherPleasantTextBoxes(groupID);
	var toolCompare = ToolCompare(toolArray);

	// if the tools are identical, do not save *******
	if(toolCompare === true){
		toolArray = [];
		if (_isEmbeddedPA){
			_isEmbeddedPA = false;
			ShowNextPage(); // in contentengine...
		}
		else{
			ShowHomePage();
		}
	} else {
		if (toolArray.length === 0){
			ShowError('Please enter at least one activity');
			return;
		}

		ShowLoader();
		$('#pleasantDoneBtn').prop('disabled', true);

		$.ajax({
			url: config.Path + '/pleasantactivity/savetool',
			data: JSON.stringify(toolArray),
			contentType: 'application/json; charset=utf-8',
			type: "POST"
		}).done(function(data){
			HideLoader();
			$('#pleasantDoneBtn').prop('disabled', false);

			if (data === null){
				HandleError("Pleasant Activity blew up...");
				return;
			} else {
				_pleasantFromDB = data;
				// alert(JSON.stringify(data));
				ShowSuccess('Pleasant activities saved.');

				if (_isEmbeddedPA){
					_isEmbeddedPA = false;
					ShowNextPage(); // in contentengine...
				}
				else {
					ShowHomePage();
				}
			}
		});
	}
}

function ToolCompare(tool){
	if(_pleasantFromDB === null){
		return false;
	}

	if(tool.length != _pleasantFromDB.length){
		return false;
	} else {
		var compare = true;
		var i = 0;
		var length = tool.length;
		for(i=0; i<length; i++){
			if(tool[i]["Name"] !=_pleasantFromDB[i]["Name"]){
				compare = false;
			}
		}
		return compare;
	}
}

function LoadPleasantActivitiesIdeas(callback) {
    
    $.ajax({
        url: config.Path + '/marvin/getpagecontrols',
        data: { pageID: '231de0ab-dc07-4a78-853f-b45289c8cacb', buyerID: null },
        type: 'GET'
    }).done(function (data) {
       
        if (data === null) {
            HandleError('/marvin/getpagecontrols returned null');
            return;
        }
           LoadPAInsertPage(data);
        if (typeof callback != "undefined" && callback !== null)
            callback();

    });
}
function LoadPAInsertPage(controls) {
    var html = '<div class="col-xs-12">';
    if (controls !== null) {
 		for (var i = 0; i < controls.length; i++) {
	        var control = controls[i];
	        if (!CheckControlBuyer(control))
	            continue;

	        // console.log(control.Typeï¿½);
	        switch (control.Type) {
	            case 'assessment':
	                html += RenderAssessment(control);
	                break;
	            case 'branch':
	                _branchControlID = control.ID;
	                LoadBranchOptions(control);
	                html += RenderBranch(control);
	                break;
	            case 'content':
	                html += RenderStaticContent(control);
	                break;
	            case 'header':
	                html += RenderHeader(control);
	                break;
	            case 'image':
	                html += RenderImage(control, true);
	                break;
	            case 'textbox':
	                html += RenderTextbox(control);
	                break;
	            case 'dropdown':
	                html += RenderDropdown(control);
	                break;
	            case 'checkbox':
	                html += RenderCheckbox(control);
	                break;
	            case 'linkedcheckbox':
	                html += RenderLinkedCheckbox(control);
	                break;
	            case 'video':
	                html += RenderVideo(control);
	                break;
	            case 'eom':
	                html += RenderEOM(control);
	                break;
	            case 'pick3':
	                html += RenderPick3(control);
	                break;
	            case 'high':
	                html += RenderHigh(control);
	                break;
	            case 'medium':
	                html += RenderMedium(control);
	                break;
	            case 'low':
	                html += RenderLow(control);
	                break;
	            case 'matters':
	                html += RenderMatters(control);
	                break;
	            case 'goal':
	                html += RenderGoal(control);
	                break;
	            case 'strength':
	                html += RenderStrength(control);
	                break;
	            case 'orderedfeedback':
	                html += RenderOrderedFeedback(control);
	                break;
	            case 'feedback':
	                html += RenderFeedback(control);
	                break;
	            case 'eomfeedback':
	                html += RenderEOMFeedback(control);
	                break;
	            case 'toolusage':
	                html += RenderToolUsage(control);
	                break;
	            case 'controllogic':
	                html += RenderControlLogic(control);
	                break;
	            case 'pagelogic':
	                html += RenderPageLogic(control);
	                break;
	            case 'insert':
	                html += RenderInsert(control);
	                break;
	        }
	    }
	}

	html += '</div><div class="col-xs-12 pleasantPopUpFinished"><i class="fa fa-caret-right right"></i><span class="right font700">Close</span></div>';
	$('#pagePleasantPopUp .innerPopUpContent').find('.popUpText').html('');
	$('#pagePleasantPopUp .innerPopUpContent').find('.popUpText').html(html);
}

